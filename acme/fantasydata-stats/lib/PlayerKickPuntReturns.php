<?php
/**
 * PlayerKickPuntReturns
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acme\FantasyDataStats
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NFL v3 Stats
 *
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acme\FantasyDataStats;

use \ArrayAccess;
use \Acme\FantasyDataStats\ObjectSerializer;

/**
 * PlayerKickPuntReturns Class Doc Comment
 *
 * @category Class
 * @package     Acme\FantasyDataStats
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PlayerKickPuntReturns implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlayerKickPuntReturns';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'player_game_id' => 'int',
        'player_id' => 'int',
        'short_name' => 'string',
        'name' => 'string',
        'team' => 'string',
        'number' => 'int',
        'position' => 'string',
        'position_category' => 'string',
        'fantasy_position' => 'string',
        'fantasy_points' => 'float',
        'updated' => 'string',
        'kick_returns' => 'int',
        'kick_return_yards' => 'int',
        'kick_return_yards_per_attempt' => 'float',
        'kick_return_long' => 'int',
        'kick_return_touchdowns' => 'int',
        'punt_returns' => 'int',
        'punt_return_yards' => 'int',
        'punt_return_yards_per_attempt' => 'float',
        'punt_return_long' => 'int',
        'punt_return_touchdowns' => 'int',
        'fumbles_lost' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'player_game_id' => null,
        'player_id' => null,
        'short_name' => null,
        'name' => null,
        'team' => null,
        'number' => null,
        'position' => null,
        'position_category' => null,
        'fantasy_position' => null,
        'fantasy_points' => null,
        'updated' => null,
        'kick_returns' => null,
        'kick_return_yards' => null,
        'kick_return_yards_per_attempt' => null,
        'kick_return_long' => null,
        'kick_return_touchdowns' => null,
        'punt_returns' => null,
        'punt_return_yards' => null,
        'punt_return_yards_per_attempt' => null,
        'punt_return_long' => null,
        'punt_return_touchdowns' => null,
        'fumbles_lost' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'player_game_id' => 'PlayerGameID',
        'player_id' => 'PlayerID',
        'short_name' => 'ShortName',
        'name' => 'Name',
        'team' => 'Team',
        'number' => 'Number',
        'position' => 'Position',
        'position_category' => 'PositionCategory',
        'fantasy_position' => 'FantasyPosition',
        'fantasy_points' => 'FantasyPoints',
        'updated' => 'Updated',
        'kick_returns' => 'KickReturns',
        'kick_return_yards' => 'KickReturnYards',
        'kick_return_yards_per_attempt' => 'KickReturnYardsPerAttempt',
        'kick_return_long' => 'KickReturnLong',
        'kick_return_touchdowns' => 'KickReturnTouchdowns',
        'punt_returns' => 'PuntReturns',
        'punt_return_yards' => 'PuntReturnYards',
        'punt_return_yards_per_attempt' => 'PuntReturnYardsPerAttempt',
        'punt_return_long' => 'PuntReturnLong',
        'punt_return_touchdowns' => 'PuntReturnTouchdowns',
        'fumbles_lost' => 'FumblesLost'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'player_game_id' => 'setPlayerGameId',
        'player_id' => 'setPlayerId',
        'short_name' => 'setShortName',
        'name' => 'setName',
        'team' => 'setTeam',
        'number' => 'setNumber',
        'position' => 'setPosition',
        'position_category' => 'setPositionCategory',
        'fantasy_position' => 'setFantasyPosition',
        'fantasy_points' => 'setFantasyPoints',
        'updated' => 'setUpdated',
        'kick_returns' => 'setKickReturns',
        'kick_return_yards' => 'setKickReturnYards',
        'kick_return_yards_per_attempt' => 'setKickReturnYardsPerAttempt',
        'kick_return_long' => 'setKickReturnLong',
        'kick_return_touchdowns' => 'setKickReturnTouchdowns',
        'punt_returns' => 'setPuntReturns',
        'punt_return_yards' => 'setPuntReturnYards',
        'punt_return_yards_per_attempt' => 'setPuntReturnYardsPerAttempt',
        'punt_return_long' => 'setPuntReturnLong',
        'punt_return_touchdowns' => 'setPuntReturnTouchdowns',
        'fumbles_lost' => 'setFumblesLost'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'player_game_id' => 'getPlayerGameId',
        'player_id' => 'getPlayerId',
        'short_name' => 'getShortName',
        'name' => 'getName',
        'team' => 'getTeam',
        'number' => 'getNumber',
        'position' => 'getPosition',
        'position_category' => 'getPositionCategory',
        'fantasy_position' => 'getFantasyPosition',
        'fantasy_points' => 'getFantasyPoints',
        'updated' => 'getUpdated',
        'kick_returns' => 'getKickReturns',
        'kick_return_yards' => 'getKickReturnYards',
        'kick_return_yards_per_attempt' => 'getKickReturnYardsPerAttempt',
        'kick_return_long' => 'getKickReturnLong',
        'kick_return_touchdowns' => 'getKickReturnTouchdowns',
        'punt_returns' => 'getPuntReturns',
        'punt_return_yards' => 'getPuntReturnYards',
        'punt_return_yards_per_attempt' => 'getPuntReturnYardsPerAttempt',
        'punt_return_long' => 'getPuntReturnLong',
        'punt_return_touchdowns' => 'getPuntReturnTouchdowns',
        'fumbles_lost' => 'getFumblesLost'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['player_game_id'] = isset($data['player_game_id']) ? $data['player_game_id'] : null;
        $this->container['player_id'] = isset($data['player_id']) ? $data['player_id'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['position_category'] = isset($data['position_category']) ? $data['position_category'] : null;
        $this->container['fantasy_position'] = isset($data['fantasy_position']) ? $data['fantasy_position'] : null;
        $this->container['fantasy_points'] = isset($data['fantasy_points']) ? $data['fantasy_points'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['kick_returns'] = isset($data['kick_returns']) ? $data['kick_returns'] : null;
        $this->container['kick_return_yards'] = isset($data['kick_return_yards']) ? $data['kick_return_yards'] : null;
        $this->container['kick_return_yards_per_attempt'] = isset($data['kick_return_yards_per_attempt']) ? $data['kick_return_yards_per_attempt'] : null;
        $this->container['kick_return_long'] = isset($data['kick_return_long']) ? $data['kick_return_long'] : null;
        $this->container['kick_return_touchdowns'] = isset($data['kick_return_touchdowns']) ? $data['kick_return_touchdowns'] : null;
        $this->container['punt_returns'] = isset($data['punt_returns']) ? $data['punt_returns'] : null;
        $this->container['punt_return_yards'] = isset($data['punt_return_yards']) ? $data['punt_return_yards'] : null;
        $this->container['punt_return_yards_per_attempt'] = isset($data['punt_return_yards_per_attempt']) ? $data['punt_return_yards_per_attempt'] : null;
        $this->container['punt_return_long'] = isset($data['punt_return_long']) ? $data['punt_return_long'] : null;
        $this->container['punt_return_touchdowns'] = isset($data['punt_return_touchdowns']) ? $data['punt_return_touchdowns'] : null;
        $this->container['fumbles_lost'] = isset($data['fumbles_lost']) ? $data['fumbles_lost'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets player_game_id
     *
     * @return int
     */
    public function getPlayerGameId()
    {
        return $this->container['player_game_id'];
    }

    /**
     * Sets player_game_id
     *
     * @param int $player_game_id player_game_id
     *
     * @return $this
     */
    public function setPlayerGameId($player_game_id)
    {
        $this->container['player_game_id'] = $player_game_id;

        return $this;
    }

    /**
     * Gets player_id
     *
     * @return int
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param int $player_id player_id
     *
     * @return $this
     */
    public function setPlayerId($player_id)
    {
        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name short_name
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets position_category
     *
     * @return string
     */
    public function getPositionCategory()
    {
        return $this->container['position_category'];
    }

    /**
     * Sets position_category
     *
     * @param string $position_category position_category
     *
     * @return $this
     */
    public function setPositionCategory($position_category)
    {
        $this->container['position_category'] = $position_category;

        return $this;
    }

    /**
     * Gets fantasy_position
     *
     * @return string
     */
    public function getFantasyPosition()
    {
        return $this->container['fantasy_position'];
    }

    /**
     * Sets fantasy_position
     *
     * @param string $fantasy_position fantasy_position
     *
     * @return $this
     */
    public function setFantasyPosition($fantasy_position)
    {
        $this->container['fantasy_position'] = $fantasy_position;

        return $this;
    }

    /**
     * Gets fantasy_points
     *
     * @return float
     */
    public function getFantasyPoints()
    {
        return $this->container['fantasy_points'];
    }

    /**
     * Sets fantasy_points
     *
     * @param float $fantasy_points fantasy_points
     *
     * @return $this
     */
    public function setFantasyPoints($fantasy_points)
    {
        $this->container['fantasy_points'] = $fantasy_points;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return string
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param string $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets kick_returns
     *
     * @return int
     */
    public function getKickReturns()
    {
        return $this->container['kick_returns'];
    }

    /**
     * Sets kick_returns
     *
     * @param int $kick_returns kick_returns
     *
     * @return $this
     */
    public function setKickReturns($kick_returns)
    {
        $this->container['kick_returns'] = $kick_returns;

        return $this;
    }

    /**
     * Gets kick_return_yards
     *
     * @return int
     */
    public function getKickReturnYards()
    {
        return $this->container['kick_return_yards'];
    }

    /**
     * Sets kick_return_yards
     *
     * @param int $kick_return_yards kick_return_yards
     *
     * @return $this
     */
    public function setKickReturnYards($kick_return_yards)
    {
        $this->container['kick_return_yards'] = $kick_return_yards;

        return $this;
    }

    /**
     * Gets kick_return_yards_per_attempt
     *
     * @return float
     */
    public function getKickReturnYardsPerAttempt()
    {
        return $this->container['kick_return_yards_per_attempt'];
    }

    /**
     * Sets kick_return_yards_per_attempt
     *
     * @param float $kick_return_yards_per_attempt kick_return_yards_per_attempt
     *
     * @return $this
     */
    public function setKickReturnYardsPerAttempt($kick_return_yards_per_attempt)
    {
        $this->container['kick_return_yards_per_attempt'] = $kick_return_yards_per_attempt;

        return $this;
    }

    /**
     * Gets kick_return_long
     *
     * @return int
     */
    public function getKickReturnLong()
    {
        return $this->container['kick_return_long'];
    }

    /**
     * Sets kick_return_long
     *
     * @param int $kick_return_long kick_return_long
     *
     * @return $this
     */
    public function setKickReturnLong($kick_return_long)
    {
        $this->container['kick_return_long'] = $kick_return_long;

        return $this;
    }

    /**
     * Gets kick_return_touchdowns
     *
     * @return int
     */
    public function getKickReturnTouchdowns()
    {
        return $this->container['kick_return_touchdowns'];
    }

    /**
     * Sets kick_return_touchdowns
     *
     * @param int $kick_return_touchdowns kick_return_touchdowns
     *
     * @return $this
     */
    public function setKickReturnTouchdowns($kick_return_touchdowns)
    {
        $this->container['kick_return_touchdowns'] = $kick_return_touchdowns;

        return $this;
    }

    /**
     * Gets punt_returns
     *
     * @return int
     */
    public function getPuntReturns()
    {
        return $this->container['punt_returns'];
    }

    /**
     * Sets punt_returns
     *
     * @param int $punt_returns punt_returns
     *
     * @return $this
     */
    public function setPuntReturns($punt_returns)
    {
        $this->container['punt_returns'] = $punt_returns;

        return $this;
    }

    /**
     * Gets punt_return_yards
     *
     * @return int
     */
    public function getPuntReturnYards()
    {
        return $this->container['punt_return_yards'];
    }

    /**
     * Sets punt_return_yards
     *
     * @param int $punt_return_yards punt_return_yards
     *
     * @return $this
     */
    public function setPuntReturnYards($punt_return_yards)
    {
        $this->container['punt_return_yards'] = $punt_return_yards;

        return $this;
    }

    /**
     * Gets punt_return_yards_per_attempt
     *
     * @return float
     */
    public function getPuntReturnYardsPerAttempt()
    {
        return $this->container['punt_return_yards_per_attempt'];
    }

    /**
     * Sets punt_return_yards_per_attempt
     *
     * @param float $punt_return_yards_per_attempt punt_return_yards_per_attempt
     *
     * @return $this
     */
    public function setPuntReturnYardsPerAttempt($punt_return_yards_per_attempt)
    {
        $this->container['punt_return_yards_per_attempt'] = $punt_return_yards_per_attempt;

        return $this;
    }

    /**
     * Gets punt_return_long
     *
     * @return int
     */
    public function getPuntReturnLong()
    {
        return $this->container['punt_return_long'];
    }

    /**
     * Sets punt_return_long
     *
     * @param int $punt_return_long punt_return_long
     *
     * @return $this
     */
    public function setPuntReturnLong($punt_return_long)
    {
        $this->container['punt_return_long'] = $punt_return_long;

        return $this;
    }

    /**
     * Gets punt_return_touchdowns
     *
     * @return int
     */
    public function getPuntReturnTouchdowns()
    {
        return $this->container['punt_return_touchdowns'];
    }

    /**
     * Sets punt_return_touchdowns
     *
     * @param int $punt_return_touchdowns punt_return_touchdowns
     *
     * @return $this
     */
    public function setPuntReturnTouchdowns($punt_return_touchdowns)
    {
        $this->container['punt_return_touchdowns'] = $punt_return_touchdowns;

        return $this;
    }

    /**
     * Gets fumbles_lost
     *
     * @return int
     */
    public function getFumblesLost()
    {
        return $this->container['fumbles_lost'];
    }

    /**
     * Sets fumbles_lost
     *
     * @param int $fumbles_lost fumbles_lost
     *
     * @return $this
     */
    public function setFumblesLost($fumbles_lost)
    {
        $this->container['fumbles_lost'] = $fumbles_lost;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

