<?php
/**
 * FantasyPlayer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acme\FantasyDataStats
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NFL v3 Stats
 *
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acme\FantasyDataStats;

use \ArrayAccess;
use \Acme\FantasyDataStats\ObjectSerializer;

/**
 * FantasyPlayer Class Doc Comment
 *
 * @category Class
 * @package     Acme\FantasyDataStats
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class FantasyPlayer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'FantasyPlayer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'fantasy_player_key' => 'string',
        'player_id' => 'int',
        'name' => 'string',
        'team' => 'string',
        'position' => 'string',
        'average_draft_position' => 'float',
        'average_draft_position_ppr' => 'float',
        'bye_week' => 'int',
        'last_season_fantasy_points' => 'float',
        'projected_fantasy_points' => 'float',
        'auction_value' => 'int',
        'auction_value_ppr' => 'int',
        'average_draft_position_idp' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'fantasy_player_key' => null,
        'player_id' => null,
        'name' => null,
        'team' => null,
        'position' => null,
        'average_draft_position' => null,
        'average_draft_position_ppr' => null,
        'bye_week' => null,
        'last_season_fantasy_points' => null,
        'projected_fantasy_points' => null,
        'auction_value' => null,
        'auction_value_ppr' => null,
        'average_draft_position_idp' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'fantasy_player_key' => 'FantasyPlayerKey',
        'player_id' => 'PlayerID',
        'name' => 'Name',
        'team' => 'Team',
        'position' => 'Position',
        'average_draft_position' => 'AverageDraftPosition',
        'average_draft_position_ppr' => 'AverageDraftPositionPPR',
        'bye_week' => 'ByeWeek',
        'last_season_fantasy_points' => 'LastSeasonFantasyPoints',
        'projected_fantasy_points' => 'ProjectedFantasyPoints',
        'auction_value' => 'AuctionValue',
        'auction_value_ppr' => 'AuctionValuePPR',
        'average_draft_position_idp' => 'AverageDraftPositionIDP'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'fantasy_player_key' => 'setFantasyPlayerKey',
        'player_id' => 'setPlayerId',
        'name' => 'setName',
        'team' => 'setTeam',
        'position' => 'setPosition',
        'average_draft_position' => 'setAverageDraftPosition',
        'average_draft_position_ppr' => 'setAverageDraftPositionPpr',
        'bye_week' => 'setByeWeek',
        'last_season_fantasy_points' => 'setLastSeasonFantasyPoints',
        'projected_fantasy_points' => 'setProjectedFantasyPoints',
        'auction_value' => 'setAuctionValue',
        'auction_value_ppr' => 'setAuctionValuePpr',
        'average_draft_position_idp' => 'setAverageDraftPositionIdp'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'fantasy_player_key' => 'getFantasyPlayerKey',
        'player_id' => 'getPlayerId',
        'name' => 'getName',
        'team' => 'getTeam',
        'position' => 'getPosition',
        'average_draft_position' => 'getAverageDraftPosition',
        'average_draft_position_ppr' => 'getAverageDraftPositionPpr',
        'bye_week' => 'getByeWeek',
        'last_season_fantasy_points' => 'getLastSeasonFantasyPoints',
        'projected_fantasy_points' => 'getProjectedFantasyPoints',
        'auction_value' => 'getAuctionValue',
        'auction_value_ppr' => 'getAuctionValuePpr',
        'average_draft_position_idp' => 'getAverageDraftPositionIdp'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['fantasy_player_key'] = isset($data['fantasy_player_key']) ? $data['fantasy_player_key'] : null;
        $this->container['player_id'] = isset($data['player_id']) ? $data['player_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['average_draft_position'] = isset($data['average_draft_position']) ? $data['average_draft_position'] : null;
        $this->container['average_draft_position_ppr'] = isset($data['average_draft_position_ppr']) ? $data['average_draft_position_ppr'] : null;
        $this->container['bye_week'] = isset($data['bye_week']) ? $data['bye_week'] : null;
        $this->container['last_season_fantasy_points'] = isset($data['last_season_fantasy_points']) ? $data['last_season_fantasy_points'] : null;
        $this->container['projected_fantasy_points'] = isset($data['projected_fantasy_points']) ? $data['projected_fantasy_points'] : null;
        $this->container['auction_value'] = isset($data['auction_value']) ? $data['auction_value'] : null;
        $this->container['auction_value_ppr'] = isset($data['auction_value_ppr']) ? $data['auction_value_ppr'] : null;
        $this->container['average_draft_position_idp'] = isset($data['average_draft_position_idp']) ? $data['average_draft_position_idp'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets fantasy_player_key
     *
     * @return string
     */
    public function getFantasyPlayerKey()
    {
        return $this->container['fantasy_player_key'];
    }

    /**
     * Sets fantasy_player_key
     *
     * @param string $fantasy_player_key fantasy_player_key
     *
     * @return $this
     */
    public function setFantasyPlayerKey($fantasy_player_key)
    {
        $this->container['fantasy_player_key'] = $fantasy_player_key;

        return $this;
    }

    /**
     * Gets player_id
     *
     * @return int
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param int $player_id player_id
     *
     * @return $this
     */
    public function setPlayerId($player_id)
    {
        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets average_draft_position
     *
     * @return float
     */
    public function getAverageDraftPosition()
    {
        return $this->container['average_draft_position'];
    }

    /**
     * Sets average_draft_position
     *
     * @param float $average_draft_position average_draft_position
     *
     * @return $this
     */
    public function setAverageDraftPosition($average_draft_position)
    {
        $this->container['average_draft_position'] = $average_draft_position;

        return $this;
    }

    /**
     * Gets average_draft_position_ppr
     *
     * @return float
     */
    public function getAverageDraftPositionPpr()
    {
        return $this->container['average_draft_position_ppr'];
    }

    /**
     * Sets average_draft_position_ppr
     *
     * @param float $average_draft_position_ppr average_draft_position_ppr
     *
     * @return $this
     */
    public function setAverageDraftPositionPpr($average_draft_position_ppr)
    {
        $this->container['average_draft_position_ppr'] = $average_draft_position_ppr;

        return $this;
    }

    /**
     * Gets bye_week
     *
     * @return int
     */
    public function getByeWeek()
    {
        return $this->container['bye_week'];
    }

    /**
     * Sets bye_week
     *
     * @param int $bye_week bye_week
     *
     * @return $this
     */
    public function setByeWeek($bye_week)
    {
        $this->container['bye_week'] = $bye_week;

        return $this;
    }

    /**
     * Gets last_season_fantasy_points
     *
     * @return float
     */
    public function getLastSeasonFantasyPoints()
    {
        return $this->container['last_season_fantasy_points'];
    }

    /**
     * Sets last_season_fantasy_points
     *
     * @param float $last_season_fantasy_points last_season_fantasy_points
     *
     * @return $this
     */
    public function setLastSeasonFantasyPoints($last_season_fantasy_points)
    {
        $this->container['last_season_fantasy_points'] = $last_season_fantasy_points;

        return $this;
    }

    /**
     * Gets projected_fantasy_points
     *
     * @return float
     */
    public function getProjectedFantasyPoints()
    {
        return $this->container['projected_fantasy_points'];
    }

    /**
     * Sets projected_fantasy_points
     *
     * @param float $projected_fantasy_points projected_fantasy_points
     *
     * @return $this
     */
    public function setProjectedFantasyPoints($projected_fantasy_points)
    {
        $this->container['projected_fantasy_points'] = $projected_fantasy_points;

        return $this;
    }

    /**
     * Gets auction_value
     *
     * @return int
     */
    public function getAuctionValue()
    {
        return $this->container['auction_value'];
    }

    /**
     * Sets auction_value
     *
     * @param int $auction_value auction_value
     *
     * @return $this
     */
    public function setAuctionValue($auction_value)
    {
        $this->container['auction_value'] = $auction_value;

        return $this;
    }

    /**
     * Gets auction_value_ppr
     *
     * @return int
     */
    public function getAuctionValuePpr()
    {
        return $this->container['auction_value_ppr'];
    }

    /**
     * Sets auction_value_ppr
     *
     * @param int $auction_value_ppr auction_value_ppr
     *
     * @return $this
     */
    public function setAuctionValuePpr($auction_value_ppr)
    {
        $this->container['auction_value_ppr'] = $auction_value_ppr;

        return $this;
    }

    /**
     * Gets average_draft_position_idp
     *
     * @return int
     */
    public function getAverageDraftPositionIdp()
    {
        return $this->container['average_draft_position_idp'];
    }

    /**
     * Sets average_draft_position_idp
     *
     * @param int $average_draft_position_idp average_draft_position_idp
     *
     * @return $this
     */
    public function setAverageDraftPositionIdp($average_draft_position_idp)
    {
        $this->container['average_draft_position_idp'] = $average_draft_position_idp;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

