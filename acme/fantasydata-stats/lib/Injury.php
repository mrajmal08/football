<?php
/**
 * Injury
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acme\FantasyDataStats
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NFL v3 Stats
 *
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acme\FantasyDataStats;

use \ArrayAccess;
use \Acme\FantasyDataStats\ObjectSerializer;

/**
 * Injury Class Doc Comment
 *
 * @category Class
 * @package     Acme\FantasyDataStats
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Injury implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Injury';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'injury_id' => 'int',
        'season_type' => 'int',
        'season' => 'int',
        'week' => 'int',
        'player_id' => 'int',
        'name' => 'string',
        'position' => 'string',
        'number' => 'int',
        'team' => 'string',
        'opponent' => 'string',
        'body_part' => 'string',
        'status' => 'string',
        'practice' => 'string',
        'practice_description' => 'string',
        'updated' => 'string',
        'declared_inactive' => 'bool',
        'team_id' => 'int',
        'opponent_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'injury_id' => null,
        'season_type' => null,
        'season' => null,
        'week' => null,
        'player_id' => null,
        'name' => null,
        'position' => null,
        'number' => null,
        'team' => null,
        'opponent' => null,
        'body_part' => null,
        'status' => null,
        'practice' => null,
        'practice_description' => null,
        'updated' => null,
        'declared_inactive' => null,
        'team_id' => null,
        'opponent_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'injury_id' => 'InjuryID',
        'season_type' => 'SeasonType',
        'season' => 'Season',
        'week' => 'Week',
        'player_id' => 'PlayerID',
        'name' => 'Name',
        'position' => 'Position',
        'number' => 'Number',
        'team' => 'Team',
        'opponent' => 'Opponent',
        'body_part' => 'BodyPart',
        'status' => 'Status',
        'practice' => 'Practice',
        'practice_description' => 'PracticeDescription',
        'updated' => 'Updated',
        'declared_inactive' => 'DeclaredInactive',
        'team_id' => 'TeamID',
        'opponent_id' => 'OpponentID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'injury_id' => 'setInjuryId',
        'season_type' => 'setSeasonType',
        'season' => 'setSeason',
        'week' => 'setWeek',
        'player_id' => 'setPlayerId',
        'name' => 'setName',
        'position' => 'setPosition',
        'number' => 'setNumber',
        'team' => 'setTeam',
        'opponent' => 'setOpponent',
        'body_part' => 'setBodyPart',
        'status' => 'setStatus',
        'practice' => 'setPractice',
        'practice_description' => 'setPracticeDescription',
        'updated' => 'setUpdated',
        'declared_inactive' => 'setDeclaredInactive',
        'team_id' => 'setTeamId',
        'opponent_id' => 'setOpponentId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'injury_id' => 'getInjuryId',
        'season_type' => 'getSeasonType',
        'season' => 'getSeason',
        'week' => 'getWeek',
        'player_id' => 'getPlayerId',
        'name' => 'getName',
        'position' => 'getPosition',
        'number' => 'getNumber',
        'team' => 'getTeam',
        'opponent' => 'getOpponent',
        'body_part' => 'getBodyPart',
        'status' => 'getStatus',
        'practice' => 'getPractice',
        'practice_description' => 'getPracticeDescription',
        'updated' => 'getUpdated',
        'declared_inactive' => 'getDeclaredInactive',
        'team_id' => 'getTeamId',
        'opponent_id' => 'getOpponentId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['injury_id'] = isset($data['injury_id']) ? $data['injury_id'] : null;
        $this->container['season_type'] = isset($data['season_type']) ? $data['season_type'] : null;
        $this->container['season'] = isset($data['season']) ? $data['season'] : null;
        $this->container['week'] = isset($data['week']) ? $data['week'] : null;
        $this->container['player_id'] = isset($data['player_id']) ? $data['player_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['opponent'] = isset($data['opponent']) ? $data['opponent'] : null;
        $this->container['body_part'] = isset($data['body_part']) ? $data['body_part'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['practice'] = isset($data['practice']) ? $data['practice'] : null;
        $this->container['practice_description'] = isset($data['practice_description']) ? $data['practice_description'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['declared_inactive'] = isset($data['declared_inactive']) ? $data['declared_inactive'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['opponent_id'] = isset($data['opponent_id']) ? $data['opponent_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets injury_id
     *
     * @return int
     */
    public function getInjuryId()
    {
        return $this->container['injury_id'];
    }

    /**
     * Sets injury_id
     *
     * @param int $injury_id injury_id
     *
     * @return $this
     */
    public function setInjuryId($injury_id)
    {
        $this->container['injury_id'] = $injury_id;

        return $this;
    }

    /**
     * Gets season_type
     *
     * @return int
     */
    public function getSeasonType()
    {
        return $this->container['season_type'];
    }

    /**
     * Sets season_type
     *
     * @param int $season_type season_type
     *
     * @return $this
     */
    public function setSeasonType($season_type)
    {
        $this->container['season_type'] = $season_type;

        return $this;
    }

    /**
     * Gets season
     *
     * @return int
     */
    public function getSeason()
    {
        return $this->container['season'];
    }

    /**
     * Sets season
     *
     * @param int $season season
     *
     * @return $this
     */
    public function setSeason($season)
    {
        $this->container['season'] = $season;

        return $this;
    }

    /**
     * Gets week
     *
     * @return int
     */
    public function getWeek()
    {
        return $this->container['week'];
    }

    /**
     * Sets week
     *
     * @param int $week week
     *
     * @return $this
     */
    public function setWeek($week)
    {
        $this->container['week'] = $week;

        return $this;
    }

    /**
     * Gets player_id
     *
     * @return int
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param int $player_id player_id
     *
     * @return $this
     */
    public function setPlayerId($player_id)
    {
        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets opponent
     *
     * @return string
     */
    public function getOpponent()
    {
        return $this->container['opponent'];
    }

    /**
     * Sets opponent
     *
     * @param string $opponent opponent
     *
     * @return $this
     */
    public function setOpponent($opponent)
    {
        $this->container['opponent'] = $opponent;

        return $this;
    }

    /**
     * Gets body_part
     *
     * @return string
     */
    public function getBodyPart()
    {
        return $this->container['body_part'];
    }

    /**
     * Sets body_part
     *
     * @param string $body_part body_part
     *
     * @return $this
     */
    public function setBodyPart($body_part)
    {
        $this->container['body_part'] = $body_part;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets practice
     *
     * @return string
     */
    public function getPractice()
    {
        return $this->container['practice'];
    }

    /**
     * Sets practice
     *
     * @param string $practice practice
     *
     * @return $this
     */
    public function setPractice($practice)
    {
        $this->container['practice'] = $practice;

        return $this;
    }

    /**
     * Gets practice_description
     *
     * @return string
     */
    public function getPracticeDescription()
    {
        return $this->container['practice_description'];
    }

    /**
     * Sets practice_description
     *
     * @param string $practice_description practice_description
     *
     * @return $this
     */
    public function setPracticeDescription($practice_description)
    {
        $this->container['practice_description'] = $practice_description;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return string
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param string $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets declared_inactive
     *
     * @return bool
     */
    public function getDeclaredInactive()
    {
        return $this->container['declared_inactive'];
    }

    /**
     * Sets declared_inactive
     *
     * @param bool $declared_inactive declared_inactive
     *
     * @return $this
     */
    public function setDeclaredInactive($declared_inactive)
    {
        $this->container['declared_inactive'] = $declared_inactive;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int $team_id team_id
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets opponent_id
     *
     * @return int
     */
    public function getOpponentId()
    {
        return $this->container['opponent_id'];
    }

    /**
     * Sets opponent_id
     *
     * @param int $opponent_id opponent_id
     *
     * @return $this
     */
    public function setOpponentId($opponent_id)
    {
        $this->container['opponent_id'] = $opponent_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

