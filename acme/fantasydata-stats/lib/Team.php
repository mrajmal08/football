<?php
/**
 * Team
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acme\FantasyDataStats
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NFL v3 Stats
 *
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acme\FantasyDataStats;

use \ArrayAccess;
use \Acme\FantasyDataStats\ObjectSerializer;

/**
 * Team Class Doc Comment
 *
 * @category Class
 * @package     Acme\FantasyDataStats
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Team implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Team';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'key' => 'string',
        'team_id' => 'int',
        'player_id' => 'int',
        'city' => 'string',
        'name' => 'string',
        'conference' => 'string',
        'division' => 'string',
        'full_name' => 'string',
        'stadium_id' => 'int',
        'bye_week' => 'int',
        'average_draft_position' => 'float',
        'average_draft_position_ppr' => 'float',
        'head_coach' => 'string',
        'offensive_coordinator' => 'string',
        'defensive_coordinator' => 'string',
        'special_teams_coach' => 'string',
        'offensive_scheme' => 'string',
        'defensive_scheme' => 'string',
        'upcoming_salary' => 'int',
        'upcoming_opponent' => 'string',
        'upcoming_opponent_rank' => 'int',
        'upcoming_opponent_position_rank' => 'int',
        'upcoming_fan_duel_salary' => 'int',
        'upcoming_draft_kings_salary' => 'int',
        'upcoming_yahoo_salary' => 'int',
        'primary_color' => 'string',
        'secondary_color' => 'string',
        'tertiary_color' => 'string',
        'quaternary_color' => 'string',
        'wikipedia_logo_url' => 'string',
        'wikipedia_word_mark_url' => 'string',
        'global_team_id' => 'int',
        'draft_kings_name' => 'string',
        'draft_kings_player_id' => 'int',
        'fan_duel_name' => 'string',
        'fan_duel_player_id' => 'int',
        'fantasy_draft_name' => 'string',
        'fantasy_draft_player_id' => 'int',
        'yahoo_name' => 'string',
        'yahoo_player_id' => 'int',
        'stadium_details' => '\Acme\FantasyDataStats\\Stadium'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'key' => null,
        'team_id' => null,
        'player_id' => null,
        'city' => null,
        'name' => null,
        'conference' => null,
        'division' => null,
        'full_name' => null,
        'stadium_id' => null,
        'bye_week' => null,
        'average_draft_position' => null,
        'average_draft_position_ppr' => null,
        'head_coach' => null,
        'offensive_coordinator' => null,
        'defensive_coordinator' => null,
        'special_teams_coach' => null,
        'offensive_scheme' => null,
        'defensive_scheme' => null,
        'upcoming_salary' => null,
        'upcoming_opponent' => null,
        'upcoming_opponent_rank' => null,
        'upcoming_opponent_position_rank' => null,
        'upcoming_fan_duel_salary' => null,
        'upcoming_draft_kings_salary' => null,
        'upcoming_yahoo_salary' => null,
        'primary_color' => null,
        'secondary_color' => null,
        'tertiary_color' => null,
        'quaternary_color' => null,
        'wikipedia_logo_url' => null,
        'wikipedia_word_mark_url' => null,
        'global_team_id' => null,
        'draft_kings_name' => null,
        'draft_kings_player_id' => null,
        'fan_duel_name' => null,
        'fan_duel_player_id' => null,
        'fantasy_draft_name' => null,
        'fantasy_draft_player_id' => null,
        'yahoo_name' => null,
        'yahoo_player_id' => null,
        'stadium_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'key' => 'Key',
        'team_id' => 'TeamID',
        'player_id' => 'PlayerID',
        'city' => 'City',
        'name' => 'Name',
        'conference' => 'Conference',
        'division' => 'Division',
        'full_name' => 'FullName',
        'stadium_id' => 'StadiumID',
        'bye_week' => 'ByeWeek',
        'average_draft_position' => 'AverageDraftPosition',
        'average_draft_position_ppr' => 'AverageDraftPositionPPR',
        'head_coach' => 'HeadCoach',
        'offensive_coordinator' => 'OffensiveCoordinator',
        'defensive_coordinator' => 'DefensiveCoordinator',
        'special_teams_coach' => 'SpecialTeamsCoach',
        'offensive_scheme' => 'OffensiveScheme',
        'defensive_scheme' => 'DefensiveScheme',
        'upcoming_salary' => 'UpcomingSalary',
        'upcoming_opponent' => 'UpcomingOpponent',
        'upcoming_opponent_rank' => 'UpcomingOpponentRank',
        'upcoming_opponent_position_rank' => 'UpcomingOpponentPositionRank',
        'upcoming_fan_duel_salary' => 'UpcomingFanDuelSalary',
        'upcoming_draft_kings_salary' => 'UpcomingDraftKingsSalary',
        'upcoming_yahoo_salary' => 'UpcomingYahooSalary',
        'primary_color' => 'PrimaryColor',
        'secondary_color' => 'SecondaryColor',
        'tertiary_color' => 'TertiaryColor',
        'quaternary_color' => 'QuaternaryColor',
        'wikipedia_logo_url' => 'WikipediaLogoUrl',
        'wikipedia_word_mark_url' => 'WikipediaWordMarkUrl',
        'global_team_id' => 'GlobalTeamID',
        'draft_kings_name' => 'DraftKingsName',
        'draft_kings_player_id' => 'DraftKingsPlayerID',
        'fan_duel_name' => 'FanDuelName',
        'fan_duel_player_id' => 'FanDuelPlayerID',
        'fantasy_draft_name' => 'FantasyDraftName',
        'fantasy_draft_player_id' => 'FantasyDraftPlayerID',
        'yahoo_name' => 'YahooName',
        'yahoo_player_id' => 'YahooPlayerID',
        'stadium_details' => 'StadiumDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'key' => 'setKey',
        'team_id' => 'setTeamId',
        'player_id' => 'setPlayerId',
        'city' => 'setCity',
        'name' => 'setName',
        'conference' => 'setConference',
        'division' => 'setDivision',
        'full_name' => 'setFullName',
        'stadium_id' => 'setStadiumId',
        'bye_week' => 'setByeWeek',
        'average_draft_position' => 'setAverageDraftPosition',
        'average_draft_position_ppr' => 'setAverageDraftPositionPpr',
        'head_coach' => 'setHeadCoach',
        'offensive_coordinator' => 'setOffensiveCoordinator',
        'defensive_coordinator' => 'setDefensiveCoordinator',
        'special_teams_coach' => 'setSpecialTeamsCoach',
        'offensive_scheme' => 'setOffensiveScheme',
        'defensive_scheme' => 'setDefensiveScheme',
        'upcoming_salary' => 'setUpcomingSalary',
        'upcoming_opponent' => 'setUpcomingOpponent',
        'upcoming_opponent_rank' => 'setUpcomingOpponentRank',
        'upcoming_opponent_position_rank' => 'setUpcomingOpponentPositionRank',
        'upcoming_fan_duel_salary' => 'setUpcomingFanDuelSalary',
        'upcoming_draft_kings_salary' => 'setUpcomingDraftKingsSalary',
        'upcoming_yahoo_salary' => 'setUpcomingYahooSalary',
        'primary_color' => 'setPrimaryColor',
        'secondary_color' => 'setSecondaryColor',
        'tertiary_color' => 'setTertiaryColor',
        'quaternary_color' => 'setQuaternaryColor',
        'wikipedia_logo_url' => 'setWikipediaLogoUrl',
        'wikipedia_word_mark_url' => 'setWikipediaWordMarkUrl',
        'global_team_id' => 'setGlobalTeamId',
        'draft_kings_name' => 'setDraftKingsName',
        'draft_kings_player_id' => 'setDraftKingsPlayerId',
        'fan_duel_name' => 'setFanDuelName',
        'fan_duel_player_id' => 'setFanDuelPlayerId',
        'fantasy_draft_name' => 'setFantasyDraftName',
        'fantasy_draft_player_id' => 'setFantasyDraftPlayerId',
        'yahoo_name' => 'setYahooName',
        'yahoo_player_id' => 'setYahooPlayerId',
        'stadium_details' => 'setStadiumDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'key' => 'getKey',
        'team_id' => 'getTeamId',
        'player_id' => 'getPlayerId',
        'city' => 'getCity',
        'name' => 'getName',
        'conference' => 'getConference',
        'division' => 'getDivision',
        'full_name' => 'getFullName',
        'stadium_id' => 'getStadiumId',
        'bye_week' => 'getByeWeek',
        'average_draft_position' => 'getAverageDraftPosition',
        'average_draft_position_ppr' => 'getAverageDraftPositionPpr',
        'head_coach' => 'getHeadCoach',
        'offensive_coordinator' => 'getOffensiveCoordinator',
        'defensive_coordinator' => 'getDefensiveCoordinator',
        'special_teams_coach' => 'getSpecialTeamsCoach',
        'offensive_scheme' => 'getOffensiveScheme',
        'defensive_scheme' => 'getDefensiveScheme',
        'upcoming_salary' => 'getUpcomingSalary',
        'upcoming_opponent' => 'getUpcomingOpponent',
        'upcoming_opponent_rank' => 'getUpcomingOpponentRank',
        'upcoming_opponent_position_rank' => 'getUpcomingOpponentPositionRank',
        'upcoming_fan_duel_salary' => 'getUpcomingFanDuelSalary',
        'upcoming_draft_kings_salary' => 'getUpcomingDraftKingsSalary',
        'upcoming_yahoo_salary' => 'getUpcomingYahooSalary',
        'primary_color' => 'getPrimaryColor',
        'secondary_color' => 'getSecondaryColor',
        'tertiary_color' => 'getTertiaryColor',
        'quaternary_color' => 'getQuaternaryColor',
        'wikipedia_logo_url' => 'getWikipediaLogoUrl',
        'wikipedia_word_mark_url' => 'getWikipediaWordMarkUrl',
        'global_team_id' => 'getGlobalTeamId',
        'draft_kings_name' => 'getDraftKingsName',
        'draft_kings_player_id' => 'getDraftKingsPlayerId',
        'fan_duel_name' => 'getFanDuelName',
        'fan_duel_player_id' => 'getFanDuelPlayerId',
        'fantasy_draft_name' => 'getFantasyDraftName',
        'fantasy_draft_player_id' => 'getFantasyDraftPlayerId',
        'yahoo_name' => 'getYahooName',
        'yahoo_player_id' => 'getYahooPlayerId',
        'stadium_details' => 'getStadiumDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['key'] = isset($data['key']) ? $data['key'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['player_id'] = isset($data['player_id']) ? $data['player_id'] : null;
        $this->container['city'] = isset($data['city']) ? $data['city'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['conference'] = isset($data['conference']) ? $data['conference'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['full_name'] = isset($data['full_name']) ? $data['full_name'] : null;
        $this->container['stadium_id'] = isset($data['stadium_id']) ? $data['stadium_id'] : null;
        $this->container['bye_week'] = isset($data['bye_week']) ? $data['bye_week'] : null;
        $this->container['average_draft_position'] = isset($data['average_draft_position']) ? $data['average_draft_position'] : null;
        $this->container['average_draft_position_ppr'] = isset($data['average_draft_position_ppr']) ? $data['average_draft_position_ppr'] : null;
        $this->container['head_coach'] = isset($data['head_coach']) ? $data['head_coach'] : null;
        $this->container['offensive_coordinator'] = isset($data['offensive_coordinator']) ? $data['offensive_coordinator'] : null;
        $this->container['defensive_coordinator'] = isset($data['defensive_coordinator']) ? $data['defensive_coordinator'] : null;
        $this->container['special_teams_coach'] = isset($data['special_teams_coach']) ? $data['special_teams_coach'] : null;
        $this->container['offensive_scheme'] = isset($data['offensive_scheme']) ? $data['offensive_scheme'] : null;
        $this->container['defensive_scheme'] = isset($data['defensive_scheme']) ? $data['defensive_scheme'] : null;
        $this->container['upcoming_salary'] = isset($data['upcoming_salary']) ? $data['upcoming_salary'] : null;
        $this->container['upcoming_opponent'] = isset($data['upcoming_opponent']) ? $data['upcoming_opponent'] : null;
        $this->container['upcoming_opponent_rank'] = isset($data['upcoming_opponent_rank']) ? $data['upcoming_opponent_rank'] : null;
        $this->container['upcoming_opponent_position_rank'] = isset($data['upcoming_opponent_position_rank']) ? $data['upcoming_opponent_position_rank'] : null;
        $this->container['upcoming_fan_duel_salary'] = isset($data['upcoming_fan_duel_salary']) ? $data['upcoming_fan_duel_salary'] : null;
        $this->container['upcoming_draft_kings_salary'] = isset($data['upcoming_draft_kings_salary']) ? $data['upcoming_draft_kings_salary'] : null;
        $this->container['upcoming_yahoo_salary'] = isset($data['upcoming_yahoo_salary']) ? $data['upcoming_yahoo_salary'] : null;
        $this->container['primary_color'] = isset($data['primary_color']) ? $data['primary_color'] : null;
        $this->container['secondary_color'] = isset($data['secondary_color']) ? $data['secondary_color'] : null;
        $this->container['tertiary_color'] = isset($data['tertiary_color']) ? $data['tertiary_color'] : null;
        $this->container['quaternary_color'] = isset($data['quaternary_color']) ? $data['quaternary_color'] : null;
        $this->container['wikipedia_logo_url'] = isset($data['wikipedia_logo_url']) ? $data['wikipedia_logo_url'] : null;
        $this->container['wikipedia_word_mark_url'] = isset($data['wikipedia_word_mark_url']) ? $data['wikipedia_word_mark_url'] : null;
        $this->container['global_team_id'] = isset($data['global_team_id']) ? $data['global_team_id'] : null;
        $this->container['draft_kings_name'] = isset($data['draft_kings_name']) ? $data['draft_kings_name'] : null;
        $this->container['draft_kings_player_id'] = isset($data['draft_kings_player_id']) ? $data['draft_kings_player_id'] : null;
        $this->container['fan_duel_name'] = isset($data['fan_duel_name']) ? $data['fan_duel_name'] : null;
        $this->container['fan_duel_player_id'] = isset($data['fan_duel_player_id']) ? $data['fan_duel_player_id'] : null;
        $this->container['fantasy_draft_name'] = isset($data['fantasy_draft_name']) ? $data['fantasy_draft_name'] : null;
        $this->container['fantasy_draft_player_id'] = isset($data['fantasy_draft_player_id']) ? $data['fantasy_draft_player_id'] : null;
        $this->container['yahoo_name'] = isset($data['yahoo_name']) ? $data['yahoo_name'] : null;
        $this->container['yahoo_player_id'] = isset($data['yahoo_player_id']) ? $data['yahoo_player_id'] : null;
        $this->container['stadium_details'] = isset($data['stadium_details']) ? $data['stadium_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets key
     *
     * @return string
     */
    public function getKey()
    {
        return $this->container['key'];
    }

    /**
     * Sets key
     *
     * @param string $key key
     *
     * @return $this
     */
    public function setKey($key)
    {
        $this->container['key'] = $key;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int $team_id team_id
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets player_id
     *
     * @return int
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param int $player_id player_id
     *
     * @return $this
     */
    public function setPlayerId($player_id)
    {
        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets city
     *
     * @return string
     */
    public function getCity()
    {
        return $this->container['city'];
    }

    /**
     * Sets city
     *
     * @param string $city city
     *
     * @return $this
     */
    public function setCity($city)
    {
        $this->container['city'] = $city;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets conference
     *
     * @return string
     */
    public function getConference()
    {
        return $this->container['conference'];
    }

    /**
     * Sets conference
     *
     * @param string $conference conference
     *
     * @return $this
     */
    public function setConference($conference)
    {
        $this->container['conference'] = $conference;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string $division division
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets full_name
     *
     * @return string
     */
    public function getFullName()
    {
        return $this->container['full_name'];
    }

    /**
     * Sets full_name
     *
     * @param string $full_name full_name
     *
     * @return $this
     */
    public function setFullName($full_name)
    {
        $this->container['full_name'] = $full_name;

        return $this;
    }

    /**
     * Gets stadium_id
     *
     * @return int
     */
    public function getStadiumId()
    {
        return $this->container['stadium_id'];
    }

    /**
     * Sets stadium_id
     *
     * @param int $stadium_id stadium_id
     *
     * @return $this
     */
    public function setStadiumId($stadium_id)
    {
        $this->container['stadium_id'] = $stadium_id;

        return $this;
    }

    /**
     * Gets bye_week
     *
     * @return int
     */
    public function getByeWeek()
    {
        return $this->container['bye_week'];
    }

    /**
     * Sets bye_week
     *
     * @param int $bye_week bye_week
     *
     * @return $this
     */
    public function setByeWeek($bye_week)
    {
        $this->container['bye_week'] = $bye_week;

        return $this;
    }

    /**
     * Gets average_draft_position
     *
     * @return float
     */
    public function getAverageDraftPosition()
    {
        return $this->container['average_draft_position'];
    }

    /**
     * Sets average_draft_position
     *
     * @param float $average_draft_position average_draft_position
     *
     * @return $this
     */
    public function setAverageDraftPosition($average_draft_position)
    {
        $this->container['average_draft_position'] = $average_draft_position;

        return $this;
    }

    /**
     * Gets average_draft_position_ppr
     *
     * @return float
     */
    public function getAverageDraftPositionPpr()
    {
        return $this->container['average_draft_position_ppr'];
    }

    /**
     * Sets average_draft_position_ppr
     *
     * @param float $average_draft_position_ppr average_draft_position_ppr
     *
     * @return $this
     */
    public function setAverageDraftPositionPpr($average_draft_position_ppr)
    {
        $this->container['average_draft_position_ppr'] = $average_draft_position_ppr;

        return $this;
    }

    /**
     * Gets head_coach
     *
     * @return string
     */
    public function getHeadCoach()
    {
        return $this->container['head_coach'];
    }

    /**
     * Sets head_coach
     *
     * @param string $head_coach head_coach
     *
     * @return $this
     */
    public function setHeadCoach($head_coach)
    {
        $this->container['head_coach'] = $head_coach;

        return $this;
    }

    /**
     * Gets offensive_coordinator
     *
     * @return string
     */
    public function getOffensiveCoordinator()
    {
        return $this->container['offensive_coordinator'];
    }

    /**
     * Sets offensive_coordinator
     *
     * @param string $offensive_coordinator offensive_coordinator
     *
     * @return $this
     */
    public function setOffensiveCoordinator($offensive_coordinator)
    {
        $this->container['offensive_coordinator'] = $offensive_coordinator;

        return $this;
    }

    /**
     * Gets defensive_coordinator
     *
     * @return string
     */
    public function getDefensiveCoordinator()
    {
        return $this->container['defensive_coordinator'];
    }

    /**
     * Sets defensive_coordinator
     *
     * @param string $defensive_coordinator defensive_coordinator
     *
     * @return $this
     */
    public function setDefensiveCoordinator($defensive_coordinator)
    {
        $this->container['defensive_coordinator'] = $defensive_coordinator;

        return $this;
    }

    /**
     * Gets special_teams_coach
     *
     * @return string
     */
    public function getSpecialTeamsCoach()
    {
        return $this->container['special_teams_coach'];
    }

    /**
     * Sets special_teams_coach
     *
     * @param string $special_teams_coach special_teams_coach
     *
     * @return $this
     */
    public function setSpecialTeamsCoach($special_teams_coach)
    {
        $this->container['special_teams_coach'] = $special_teams_coach;

        return $this;
    }

    /**
     * Gets offensive_scheme
     *
     * @return string
     */
    public function getOffensiveScheme()
    {
        return $this->container['offensive_scheme'];
    }

    /**
     * Sets offensive_scheme
     *
     * @param string $offensive_scheme offensive_scheme
     *
     * @return $this
     */
    public function setOffensiveScheme($offensive_scheme)
    {
        $this->container['offensive_scheme'] = $offensive_scheme;

        return $this;
    }

    /**
     * Gets defensive_scheme
     *
     * @return string
     */
    public function getDefensiveScheme()
    {
        return $this->container['defensive_scheme'];
    }

    /**
     * Sets defensive_scheme
     *
     * @param string $defensive_scheme defensive_scheme
     *
     * @return $this
     */
    public function setDefensiveScheme($defensive_scheme)
    {
        $this->container['defensive_scheme'] = $defensive_scheme;

        return $this;
    }

    /**
     * Gets upcoming_salary
     *
     * @return int
     */
    public function getUpcomingSalary()
    {
        return $this->container['upcoming_salary'];
    }

    /**
     * Sets upcoming_salary
     *
     * @param int $upcoming_salary upcoming_salary
     *
     * @return $this
     */
    public function setUpcomingSalary($upcoming_salary)
    {
        $this->container['upcoming_salary'] = $upcoming_salary;

        return $this;
    }

    /**
     * Gets upcoming_opponent
     *
     * @return string
     */
    public function getUpcomingOpponent()
    {
        return $this->container['upcoming_opponent'];
    }

    /**
     * Sets upcoming_opponent
     *
     * @param string $upcoming_opponent upcoming_opponent
     *
     * @return $this
     */
    public function setUpcomingOpponent($upcoming_opponent)
    {
        $this->container['upcoming_opponent'] = $upcoming_opponent;

        return $this;
    }

    /**
     * Gets upcoming_opponent_rank
     *
     * @return int
     */
    public function getUpcomingOpponentRank()
    {
        return $this->container['upcoming_opponent_rank'];
    }

    /**
     * Sets upcoming_opponent_rank
     *
     * @param int $upcoming_opponent_rank upcoming_opponent_rank
     *
     * @return $this
     */
    public function setUpcomingOpponentRank($upcoming_opponent_rank)
    {
        $this->container['upcoming_opponent_rank'] = $upcoming_opponent_rank;

        return $this;
    }

    /**
     * Gets upcoming_opponent_position_rank
     *
     * @return int
     */
    public function getUpcomingOpponentPositionRank()
    {
        return $this->container['upcoming_opponent_position_rank'];
    }

    /**
     * Sets upcoming_opponent_position_rank
     *
     * @param int $upcoming_opponent_position_rank upcoming_opponent_position_rank
     *
     * @return $this
     */
    public function setUpcomingOpponentPositionRank($upcoming_opponent_position_rank)
    {
        $this->container['upcoming_opponent_position_rank'] = $upcoming_opponent_position_rank;

        return $this;
    }

    /**
     * Gets upcoming_fan_duel_salary
     *
     * @return int
     */
    public function getUpcomingFanDuelSalary()
    {
        return $this->container['upcoming_fan_duel_salary'];
    }

    /**
     * Sets upcoming_fan_duel_salary
     *
     * @param int $upcoming_fan_duel_salary upcoming_fan_duel_salary
     *
     * @return $this
     */
    public function setUpcomingFanDuelSalary($upcoming_fan_duel_salary)
    {
        $this->container['upcoming_fan_duel_salary'] = $upcoming_fan_duel_salary;

        return $this;
    }

    /**
     * Gets upcoming_draft_kings_salary
     *
     * @return int
     */
    public function getUpcomingDraftKingsSalary()
    {
        return $this->container['upcoming_draft_kings_salary'];
    }

    /**
     * Sets upcoming_draft_kings_salary
     *
     * @param int $upcoming_draft_kings_salary upcoming_draft_kings_salary
     *
     * @return $this
     */
    public function setUpcomingDraftKingsSalary($upcoming_draft_kings_salary)
    {
        $this->container['upcoming_draft_kings_salary'] = $upcoming_draft_kings_salary;

        return $this;
    }

    /**
     * Gets upcoming_yahoo_salary
     *
     * @return int
     */
    public function getUpcomingYahooSalary()
    {
        return $this->container['upcoming_yahoo_salary'];
    }

    /**
     * Sets upcoming_yahoo_salary
     *
     * @param int $upcoming_yahoo_salary upcoming_yahoo_salary
     *
     * @return $this
     */
    public function setUpcomingYahooSalary($upcoming_yahoo_salary)
    {
        $this->container['upcoming_yahoo_salary'] = $upcoming_yahoo_salary;

        return $this;
    }

    /**
     * Gets primary_color
     *
     * @return string
     */
    public function getPrimaryColor()
    {
        return $this->container['primary_color'];
    }

    /**
     * Sets primary_color
     *
     * @param string $primary_color primary_color
     *
     * @return $this
     */
    public function setPrimaryColor($primary_color)
    {
        $this->container['primary_color'] = $primary_color;

        return $this;
    }

    /**
     * Gets secondary_color
     *
     * @return string
     */
    public function getSecondaryColor()
    {
        return $this->container['secondary_color'];
    }

    /**
     * Sets secondary_color
     *
     * @param string $secondary_color secondary_color
     *
     * @return $this
     */
    public function setSecondaryColor($secondary_color)
    {
        $this->container['secondary_color'] = $secondary_color;

        return $this;
    }

    /**
     * Gets tertiary_color
     *
     * @return string
     */
    public function getTertiaryColor()
    {
        return $this->container['tertiary_color'];
    }

    /**
     * Sets tertiary_color
     *
     * @param string $tertiary_color tertiary_color
     *
     * @return $this
     */
    public function setTertiaryColor($tertiary_color)
    {
        $this->container['tertiary_color'] = $tertiary_color;

        return $this;
    }

    /**
     * Gets quaternary_color
     *
     * @return string
     */
    public function getQuaternaryColor()
    {
        return $this->container['quaternary_color'];
    }

    /**
     * Sets quaternary_color
     *
     * @param string $quaternary_color quaternary_color
     *
     * @return $this
     */
    public function setQuaternaryColor($quaternary_color)
    {
        $this->container['quaternary_color'] = $quaternary_color;

        return $this;
    }

    /**
     * Gets wikipedia_logo_url
     *
     * @return string
     */
    public function getWikipediaLogoUrl()
    {
        return $this->container['wikipedia_logo_url'];
    }

    /**
     * Sets wikipedia_logo_url
     *
     * @param string $wikipedia_logo_url wikipedia_logo_url
     *
     * @return $this
     */
    public function setWikipediaLogoUrl($wikipedia_logo_url)
    {
        $this->container['wikipedia_logo_url'] = $wikipedia_logo_url;

        return $this;
    }

    /**
     * Gets wikipedia_word_mark_url
     *
     * @return string
     */
    public function getWikipediaWordMarkUrl()
    {
        return $this->container['wikipedia_word_mark_url'];
    }

    /**
     * Sets wikipedia_word_mark_url
     *
     * @param string $wikipedia_word_mark_url wikipedia_word_mark_url
     *
     * @return $this
     */
    public function setWikipediaWordMarkUrl($wikipedia_word_mark_url)
    {
        $this->container['wikipedia_word_mark_url'] = $wikipedia_word_mark_url;

        return $this;
    }

    /**
     * Gets global_team_id
     *
     * @return int
     */
    public function getGlobalTeamId()
    {
        return $this->container['global_team_id'];
    }

    /**
     * Sets global_team_id
     *
     * @param int $global_team_id global_team_id
     *
     * @return $this
     */
    public function setGlobalTeamId($global_team_id)
    {
        $this->container['global_team_id'] = $global_team_id;

        return $this;
    }

    /**
     * Gets draft_kings_name
     *
     * @return string
     */
    public function getDraftKingsName()
    {
        return $this->container['draft_kings_name'];
    }

    /**
     * Sets draft_kings_name
     *
     * @param string $draft_kings_name draft_kings_name
     *
     * @return $this
     */
    public function setDraftKingsName($draft_kings_name)
    {
        $this->container['draft_kings_name'] = $draft_kings_name;

        return $this;
    }

    /**
     * Gets draft_kings_player_id
     *
     * @return int
     */
    public function getDraftKingsPlayerId()
    {
        return $this->container['draft_kings_player_id'];
    }

    /**
     * Sets draft_kings_player_id
     *
     * @param int $draft_kings_player_id draft_kings_player_id
     *
     * @return $this
     */
    public function setDraftKingsPlayerId($draft_kings_player_id)
    {
        $this->container['draft_kings_player_id'] = $draft_kings_player_id;

        return $this;
    }

    /**
     * Gets fan_duel_name
     *
     * @return string
     */
    public function getFanDuelName()
    {
        return $this->container['fan_duel_name'];
    }

    /**
     * Sets fan_duel_name
     *
     * @param string $fan_duel_name fan_duel_name
     *
     * @return $this
     */
    public function setFanDuelName($fan_duel_name)
    {
        $this->container['fan_duel_name'] = $fan_duel_name;

        return $this;
    }

    /**
     * Gets fan_duel_player_id
     *
     * @return int
     */
    public function getFanDuelPlayerId()
    {
        return $this->container['fan_duel_player_id'];
    }

    /**
     * Sets fan_duel_player_id
     *
     * @param int $fan_duel_player_id fan_duel_player_id
     *
     * @return $this
     */
    public function setFanDuelPlayerId($fan_duel_player_id)
    {
        $this->container['fan_duel_player_id'] = $fan_duel_player_id;

        return $this;
    }

    /**
     * Gets fantasy_draft_name
     *
     * @return string
     */
    public function getFantasyDraftName()
    {
        return $this->container['fantasy_draft_name'];
    }

    /**
     * Sets fantasy_draft_name
     *
     * @param string $fantasy_draft_name fantasy_draft_name
     *
     * @return $this
     */
    public function setFantasyDraftName($fantasy_draft_name)
    {
        $this->container['fantasy_draft_name'] = $fantasy_draft_name;

        return $this;
    }

    /**
     * Gets fantasy_draft_player_id
     *
     * @return int
     */
    public function getFantasyDraftPlayerId()
    {
        return $this->container['fantasy_draft_player_id'];
    }

    /**
     * Sets fantasy_draft_player_id
     *
     * @param int $fantasy_draft_player_id fantasy_draft_player_id
     *
     * @return $this
     */
    public function setFantasyDraftPlayerId($fantasy_draft_player_id)
    {
        $this->container['fantasy_draft_player_id'] = $fantasy_draft_player_id;

        return $this;
    }

    /**
     * Gets yahoo_name
     *
     * @return string
     */
    public function getYahooName()
    {
        return $this->container['yahoo_name'];
    }

    /**
     * Sets yahoo_name
     *
     * @param string $yahoo_name yahoo_name
     *
     * @return $this
     */
    public function setYahooName($yahoo_name)
    {
        $this->container['yahoo_name'] = $yahoo_name;

        return $this;
    }

    /**
     * Gets yahoo_player_id
     *
     * @return int
     */
    public function getYahooPlayerId()
    {
        return $this->container['yahoo_player_id'];
    }

    /**
     * Sets yahoo_player_id
     *
     * @param int $yahoo_player_id yahoo_player_id
     *
     * @return $this
     */
    public function setYahooPlayerId($yahoo_player_id)
    {
        $this->container['yahoo_player_id'] = $yahoo_player_id;

        return $this;
    }

    /**
     * Gets stadium_details
     *
     * @return \Acme\FantasyDataStats\\Stadium
     */
    public function getStadiumDetails()
    {
        return $this->container['stadium_details'];
    }

    /**
     * Sets stadium_details
     *
     * @param \Acme\FantasyDataStats\\Stadium $stadium_details stadium_details
     *
     * @return $this
     */
    public function setStadiumDetails($stadium_details)
    {
        $this->container['stadium_details'] = $stadium_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

