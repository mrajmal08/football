<?php
/**
 * Standing
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acme\FantasyDataStats
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NFL v3 Stats
 *
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acme\FantasyDataStats;

use \ArrayAccess;
use \Acme\FantasyDataStats\ObjectSerializer;

/**
 * Standing Class Doc Comment
 *
 * @category Class
 * @package     Acme\FantasyDataStats
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Standing implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Standing';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'season_type' => 'int',
        'season' => 'int',
        'conference' => 'string',
        'division' => 'string',
        'team' => 'string',
        'name' => 'string',
        'wins' => 'int',
        'losses' => 'int',
        'ties' => 'int',
        'percentage' => 'float',
        'points_for' => 'int',
        'points_against' => 'int',
        'net_points' => 'int',
        'touchdowns' => 'int',
        'division_wins' => 'int',
        'division_losses' => 'int',
        'conference_wins' => 'int',
        'conference_losses' => 'int',
        'team_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'season_type' => null,
        'season' => null,
        'conference' => null,
        'division' => null,
        'team' => null,
        'name' => null,
        'wins' => null,
        'losses' => null,
        'ties' => null,
        'percentage' => null,
        'points_for' => null,
        'points_against' => null,
        'net_points' => null,
        'touchdowns' => null,
        'division_wins' => null,
        'division_losses' => null,
        'conference_wins' => null,
        'conference_losses' => null,
        'team_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'season_type' => 'SeasonType',
        'season' => 'Season',
        'conference' => 'Conference',
        'division' => 'Division',
        'team' => 'Team',
        'name' => 'Name',
        'wins' => 'Wins',
        'losses' => 'Losses',
        'ties' => 'Ties',
        'percentage' => 'Percentage',
        'points_for' => 'PointsFor',
        'points_against' => 'PointsAgainst',
        'net_points' => 'NetPoints',
        'touchdowns' => 'Touchdowns',
        'division_wins' => 'DivisionWins',
        'division_losses' => 'DivisionLosses',
        'conference_wins' => 'ConferenceWins',
        'conference_losses' => 'ConferenceLosses',
        'team_id' => 'TeamID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'season_type' => 'setSeasonType',
        'season' => 'setSeason',
        'conference' => 'setConference',
        'division' => 'setDivision',
        'team' => 'setTeam',
        'name' => 'setName',
        'wins' => 'setWins',
        'losses' => 'setLosses',
        'ties' => 'setTies',
        'percentage' => 'setPercentage',
        'points_for' => 'setPointsFor',
        'points_against' => 'setPointsAgainst',
        'net_points' => 'setNetPoints',
        'touchdowns' => 'setTouchdowns',
        'division_wins' => 'setDivisionWins',
        'division_losses' => 'setDivisionLosses',
        'conference_wins' => 'setConferenceWins',
        'conference_losses' => 'setConferenceLosses',
        'team_id' => 'setTeamId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'season_type' => 'getSeasonType',
        'season' => 'getSeason',
        'conference' => 'getConference',
        'division' => 'getDivision',
        'team' => 'getTeam',
        'name' => 'getName',
        'wins' => 'getWins',
        'losses' => 'getLosses',
        'ties' => 'getTies',
        'percentage' => 'getPercentage',
        'points_for' => 'getPointsFor',
        'points_against' => 'getPointsAgainst',
        'net_points' => 'getNetPoints',
        'touchdowns' => 'getTouchdowns',
        'division_wins' => 'getDivisionWins',
        'division_losses' => 'getDivisionLosses',
        'conference_wins' => 'getConferenceWins',
        'conference_losses' => 'getConferenceLosses',
        'team_id' => 'getTeamId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['season_type'] = isset($data['season_type']) ? $data['season_type'] : null;
        $this->container['season'] = isset($data['season']) ? $data['season'] : null;
        $this->container['conference'] = isset($data['conference']) ? $data['conference'] : null;
        $this->container['division'] = isset($data['division']) ? $data['division'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['wins'] = isset($data['wins']) ? $data['wins'] : null;
        $this->container['losses'] = isset($data['losses']) ? $data['losses'] : null;
        $this->container['ties'] = isset($data['ties']) ? $data['ties'] : null;
        $this->container['percentage'] = isset($data['percentage']) ? $data['percentage'] : null;
        $this->container['points_for'] = isset($data['points_for']) ? $data['points_for'] : null;
        $this->container['points_against'] = isset($data['points_against']) ? $data['points_against'] : null;
        $this->container['net_points'] = isset($data['net_points']) ? $data['net_points'] : null;
        $this->container['touchdowns'] = isset($data['touchdowns']) ? $data['touchdowns'] : null;
        $this->container['division_wins'] = isset($data['division_wins']) ? $data['division_wins'] : null;
        $this->container['division_losses'] = isset($data['division_losses']) ? $data['division_losses'] : null;
        $this->container['conference_wins'] = isset($data['conference_wins']) ? $data['conference_wins'] : null;
        $this->container['conference_losses'] = isset($data['conference_losses']) ? $data['conference_losses'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets season_type
     *
     * @return int
     */
    public function getSeasonType()
    {
        return $this->container['season_type'];
    }

    /**
     * Sets season_type
     *
     * @param int $season_type season_type
     *
     * @return $this
     */
    public function setSeasonType($season_type)
    {
        $this->container['season_type'] = $season_type;

        return $this;
    }

    /**
     * Gets season
     *
     * @return int
     */
    public function getSeason()
    {
        return $this->container['season'];
    }

    /**
     * Sets season
     *
     * @param int $season season
     *
     * @return $this
     */
    public function setSeason($season)
    {
        $this->container['season'] = $season;

        return $this;
    }

    /**
     * Gets conference
     *
     * @return string
     */
    public function getConference()
    {
        return $this->container['conference'];
    }

    /**
     * Sets conference
     *
     * @param string $conference conference
     *
     * @return $this
     */
    public function setConference($conference)
    {
        $this->container['conference'] = $conference;

        return $this;
    }

    /**
     * Gets division
     *
     * @return string
     */
    public function getDivision()
    {
        return $this->container['division'];
    }

    /**
     * Sets division
     *
     * @param string $division division
     *
     * @return $this
     */
    public function setDivision($division)
    {
        $this->container['division'] = $division;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets wins
     *
     * @return int
     */
    public function getWins()
    {
        return $this->container['wins'];
    }

    /**
     * Sets wins
     *
     * @param int $wins wins
     *
     * @return $this
     */
    public function setWins($wins)
    {
        $this->container['wins'] = $wins;

        return $this;
    }

    /**
     * Gets losses
     *
     * @return int
     */
    public function getLosses()
    {
        return $this->container['losses'];
    }

    /**
     * Sets losses
     *
     * @param int $losses losses
     *
     * @return $this
     */
    public function setLosses($losses)
    {
        $this->container['losses'] = $losses;

        return $this;
    }

    /**
     * Gets ties
     *
     * @return int
     */
    public function getTies()
    {
        return $this->container['ties'];
    }

    /**
     * Sets ties
     *
     * @param int $ties ties
     *
     * @return $this
     */
    public function setTies($ties)
    {
        $this->container['ties'] = $ties;

        return $this;
    }

    /**
     * Gets percentage
     *
     * @return float
     */
    public function getPercentage()
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     *
     * @param float $percentage percentage
     *
     * @return $this
     */
    public function setPercentage($percentage)
    {
        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets points_for
     *
     * @return int
     */
    public function getPointsFor()
    {
        return $this->container['points_for'];
    }

    /**
     * Sets points_for
     *
     * @param int $points_for points_for
     *
     * @return $this
     */
    public function setPointsFor($points_for)
    {
        $this->container['points_for'] = $points_for;

        return $this;
    }

    /**
     * Gets points_against
     *
     * @return int
     */
    public function getPointsAgainst()
    {
        return $this->container['points_against'];
    }

    /**
     * Sets points_against
     *
     * @param int $points_against points_against
     *
     * @return $this
     */
    public function setPointsAgainst($points_against)
    {
        $this->container['points_against'] = $points_against;

        return $this;
    }

    /**
     * Gets net_points
     *
     * @return int
     */
    public function getNetPoints()
    {
        return $this->container['net_points'];
    }

    /**
     * Sets net_points
     *
     * @param int $net_points net_points
     *
     * @return $this
     */
    public function setNetPoints($net_points)
    {
        $this->container['net_points'] = $net_points;

        return $this;
    }

    /**
     * Gets touchdowns
     *
     * @return int
     */
    public function getTouchdowns()
    {
        return $this->container['touchdowns'];
    }

    /**
     * Sets touchdowns
     *
     * @param int $touchdowns touchdowns
     *
     * @return $this
     */
    public function setTouchdowns($touchdowns)
    {
        $this->container['touchdowns'] = $touchdowns;

        return $this;
    }

    /**
     * Gets division_wins
     *
     * @return int
     */
    public function getDivisionWins()
    {
        return $this->container['division_wins'];
    }

    /**
     * Sets division_wins
     *
     * @param int $division_wins division_wins
     *
     * @return $this
     */
    public function setDivisionWins($division_wins)
    {
        $this->container['division_wins'] = $division_wins;

        return $this;
    }

    /**
     * Gets division_losses
     *
     * @return int
     */
    public function getDivisionLosses()
    {
        return $this->container['division_losses'];
    }

    /**
     * Sets division_losses
     *
     * @param int $division_losses division_losses
     *
     * @return $this
     */
    public function setDivisionLosses($division_losses)
    {
        $this->container['division_losses'] = $division_losses;

        return $this;
    }

    /**
     * Gets conference_wins
     *
     * @return int
     */
    public function getConferenceWins()
    {
        return $this->container['conference_wins'];
    }

    /**
     * Sets conference_wins
     *
     * @param int $conference_wins conference_wins
     *
     * @return $this
     */
    public function setConferenceWins($conference_wins)
    {
        $this->container['conference_wins'] = $conference_wins;

        return $this;
    }

    /**
     * Gets conference_losses
     *
     * @return int
     */
    public function getConferenceLosses()
    {
        return $this->container['conference_losses'];
    }

    /**
     * Sets conference_losses
     *
     * @param int $conference_losses conference_losses
     *
     * @return $this
     */
    public function setConferenceLosses($conference_losses)
    {
        $this->container['conference_losses'] = $conference_losses;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int $team_id team_id
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

