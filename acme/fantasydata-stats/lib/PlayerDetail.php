<?php
/**
 * PlayerDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acme\FantasyDataStats
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NFL v3 Stats
 *
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acme\FantasyDataStats;

use \ArrayAccess;
use \Acme\FantasyDataStats\ObjectSerializer;

/**
 * PlayerDetail Class Doc Comment
 *
 * @category Class
 * @package     Acme\FantasyDataStats
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PlayerDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlayerDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'player_season' => '\Acme\FantasyDataStats\\PlayerSeason',
        'latest_news' => '\Acme\FantasyDataStats\\News[]',
        'player_id' => 'int',
        'team' => 'string',
        'number' => 'int',
        'first_name' => 'string',
        'last_name' => 'string',
        'position' => 'string',
        'status' => 'string',
        'height' => 'string',
        'weight' => 'int',
        'birth_date' => 'string',
        'college' => 'string',
        'experience' => 'int',
        'fantasy_position' => 'string',
        'active' => 'bool',
        'position_category' => 'string',
        'name' => 'string',
        'age' => 'int',
        'experience_string' => 'string',
        'birth_date_string' => 'string',
        'photo_url' => 'string',
        'bye_week' => 'int',
        'upcoming_game_opponent' => 'string',
        'upcoming_game_week' => 'int',
        'short_name' => 'string',
        'average_draft_position' => 'float',
        'depth_position_category' => 'string',
        'depth_position' => 'string',
        'depth_order' => 'int',
        'depth_display_order' => 'int',
        'current_team' => 'string',
        'college_draft_team' => 'string',
        'college_draft_year' => 'int',
        'college_draft_round' => 'int',
        'college_draft_pick' => 'int',
        'is_undrafted_free_agent' => 'bool',
        'height_feet' => 'int',
        'height_inches' => 'int',
        'upcoming_opponent_rank' => 'int',
        'upcoming_opponent_position_rank' => 'int',
        'current_status' => 'string',
        'upcoming_salary' => 'int',
        'fantasy_alarm_player_id' => 'int',
        'sport_radar_player_id' => 'string',
        'rotoworld_player_id' => 'int',
        'roto_wire_player_id' => 'int',
        'stats_player_id' => 'int',
        'sports_direct_player_id' => 'int',
        'xml_team_player_id' => 'int',
        'fan_duel_player_id' => 'int',
        'draft_kings_player_id' => 'int',
        'yahoo_player_id' => 'int',
        'injury_status' => 'string',
        'injury_body_part' => 'string',
        'injury_start_date' => 'string',
        'injury_notes' => 'string',
        'fan_duel_name' => 'string',
        'draft_kings_name' => 'string',
        'yahoo_name' => 'string',
        'fantasy_position_depth_order' => 'int',
        'injury_practice' => 'string',
        'injury_practice_description' => 'string',
        'declared_inactive' => 'bool',
        'upcoming_fan_duel_salary' => 'int',
        'upcoming_draft_kings_salary' => 'int',
        'upcoming_yahoo_salary' => 'int',
        'team_id' => 'int',
        'global_team_id' => 'int',
        'fantasy_draft_player_id' => 'int',
        'fantasy_draft_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'player_season' => null,
        'latest_news' => null,
        'player_id' => null,
        'team' => null,
        'number' => null,
        'first_name' => null,
        'last_name' => null,
        'position' => null,
        'status' => null,
        'height' => null,
        'weight' => null,
        'birth_date' => null,
        'college' => null,
        'experience' => null,
        'fantasy_position' => null,
        'active' => null,
        'position_category' => null,
        'name' => null,
        'age' => null,
        'experience_string' => null,
        'birth_date_string' => null,
        'photo_url' => null,
        'bye_week' => null,
        'upcoming_game_opponent' => null,
        'upcoming_game_week' => null,
        'short_name' => null,
        'average_draft_position' => null,
        'depth_position_category' => null,
        'depth_position' => null,
        'depth_order' => null,
        'depth_display_order' => null,
        'current_team' => null,
        'college_draft_team' => null,
        'college_draft_year' => null,
        'college_draft_round' => null,
        'college_draft_pick' => null,
        'is_undrafted_free_agent' => null,
        'height_feet' => null,
        'height_inches' => null,
        'upcoming_opponent_rank' => null,
        'upcoming_opponent_position_rank' => null,
        'current_status' => null,
        'upcoming_salary' => null,
        'fantasy_alarm_player_id' => null,
        'sport_radar_player_id' => null,
        'rotoworld_player_id' => null,
        'roto_wire_player_id' => null,
        'stats_player_id' => null,
        'sports_direct_player_id' => null,
        'xml_team_player_id' => null,
        'fan_duel_player_id' => null,
        'draft_kings_player_id' => null,
        'yahoo_player_id' => null,
        'injury_status' => null,
        'injury_body_part' => null,
        'injury_start_date' => null,
        'injury_notes' => null,
        'fan_duel_name' => null,
        'draft_kings_name' => null,
        'yahoo_name' => null,
        'fantasy_position_depth_order' => null,
        'injury_practice' => null,
        'injury_practice_description' => null,
        'declared_inactive' => null,
        'upcoming_fan_duel_salary' => null,
        'upcoming_draft_kings_salary' => null,
        'upcoming_yahoo_salary' => null,
        'team_id' => null,
        'global_team_id' => null,
        'fantasy_draft_player_id' => null,
        'fantasy_draft_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'player_season' => 'PlayerSeason',
        'latest_news' => 'LatestNews',
        'player_id' => 'PlayerID',
        'team' => 'Team',
        'number' => 'Number',
        'first_name' => 'FirstName',
        'last_name' => 'LastName',
        'position' => 'Position',
        'status' => 'Status',
        'height' => 'Height',
        'weight' => 'Weight',
        'birth_date' => 'BirthDate',
        'college' => 'College',
        'experience' => 'Experience',
        'fantasy_position' => 'FantasyPosition',
        'active' => 'Active',
        'position_category' => 'PositionCategory',
        'name' => 'Name',
        'age' => 'Age',
        'experience_string' => 'ExperienceString',
        'birth_date_string' => 'BirthDateString',
        'photo_url' => 'PhotoUrl',
        'bye_week' => 'ByeWeek',
        'upcoming_game_opponent' => 'UpcomingGameOpponent',
        'upcoming_game_week' => 'UpcomingGameWeek',
        'short_name' => 'ShortName',
        'average_draft_position' => 'AverageDraftPosition',
        'depth_position_category' => 'DepthPositionCategory',
        'depth_position' => 'DepthPosition',
        'depth_order' => 'DepthOrder',
        'depth_display_order' => 'DepthDisplayOrder',
        'current_team' => 'CurrentTeam',
        'college_draft_team' => 'CollegeDraftTeam',
        'college_draft_year' => 'CollegeDraftYear',
        'college_draft_round' => 'CollegeDraftRound',
        'college_draft_pick' => 'CollegeDraftPick',
        'is_undrafted_free_agent' => 'IsUndraftedFreeAgent',
        'height_feet' => 'HeightFeet',
        'height_inches' => 'HeightInches',
        'upcoming_opponent_rank' => 'UpcomingOpponentRank',
        'upcoming_opponent_position_rank' => 'UpcomingOpponentPositionRank',
        'current_status' => 'CurrentStatus',
        'upcoming_salary' => 'UpcomingSalary',
        'fantasy_alarm_player_id' => 'FantasyAlarmPlayerID',
        'sport_radar_player_id' => 'SportRadarPlayerID',
        'rotoworld_player_id' => 'RotoworldPlayerID',
        'roto_wire_player_id' => 'RotoWirePlayerID',
        'stats_player_id' => 'StatsPlayerID',
        'sports_direct_player_id' => 'SportsDirectPlayerID',
        'xml_team_player_id' => 'XmlTeamPlayerID',
        'fan_duel_player_id' => 'FanDuelPlayerID',
        'draft_kings_player_id' => 'DraftKingsPlayerID',
        'yahoo_player_id' => 'YahooPlayerID',
        'injury_status' => 'InjuryStatus',
        'injury_body_part' => 'InjuryBodyPart',
        'injury_start_date' => 'InjuryStartDate',
        'injury_notes' => 'InjuryNotes',
        'fan_duel_name' => 'FanDuelName',
        'draft_kings_name' => 'DraftKingsName',
        'yahoo_name' => 'YahooName',
        'fantasy_position_depth_order' => 'FantasyPositionDepthOrder',
        'injury_practice' => 'InjuryPractice',
        'injury_practice_description' => 'InjuryPracticeDescription',
        'declared_inactive' => 'DeclaredInactive',
        'upcoming_fan_duel_salary' => 'UpcomingFanDuelSalary',
        'upcoming_draft_kings_salary' => 'UpcomingDraftKingsSalary',
        'upcoming_yahoo_salary' => 'UpcomingYahooSalary',
        'team_id' => 'TeamID',
        'global_team_id' => 'GlobalTeamID',
        'fantasy_draft_player_id' => 'FantasyDraftPlayerID',
        'fantasy_draft_name' => 'FantasyDraftName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'player_season' => 'setPlayerSeason',
        'latest_news' => 'setLatestNews',
        'player_id' => 'setPlayerId',
        'team' => 'setTeam',
        'number' => 'setNumber',
        'first_name' => 'setFirstName',
        'last_name' => 'setLastName',
        'position' => 'setPosition',
        'status' => 'setStatus',
        'height' => 'setHeight',
        'weight' => 'setWeight',
        'birth_date' => 'setBirthDate',
        'college' => 'setCollege',
        'experience' => 'setExperience',
        'fantasy_position' => 'setFantasyPosition',
        'active' => 'setActive',
        'position_category' => 'setPositionCategory',
        'name' => 'setName',
        'age' => 'setAge',
        'experience_string' => 'setExperienceString',
        'birth_date_string' => 'setBirthDateString',
        'photo_url' => 'setPhotoUrl',
        'bye_week' => 'setByeWeek',
        'upcoming_game_opponent' => 'setUpcomingGameOpponent',
        'upcoming_game_week' => 'setUpcomingGameWeek',
        'short_name' => 'setShortName',
        'average_draft_position' => 'setAverageDraftPosition',
        'depth_position_category' => 'setDepthPositionCategory',
        'depth_position' => 'setDepthPosition',
        'depth_order' => 'setDepthOrder',
        'depth_display_order' => 'setDepthDisplayOrder',
        'current_team' => 'setCurrentTeam',
        'college_draft_team' => 'setCollegeDraftTeam',
        'college_draft_year' => 'setCollegeDraftYear',
        'college_draft_round' => 'setCollegeDraftRound',
        'college_draft_pick' => 'setCollegeDraftPick',
        'is_undrafted_free_agent' => 'setIsUndraftedFreeAgent',
        'height_feet' => 'setHeightFeet',
        'height_inches' => 'setHeightInches',
        'upcoming_opponent_rank' => 'setUpcomingOpponentRank',
        'upcoming_opponent_position_rank' => 'setUpcomingOpponentPositionRank',
        'current_status' => 'setCurrentStatus',
        'upcoming_salary' => 'setUpcomingSalary',
        'fantasy_alarm_player_id' => 'setFantasyAlarmPlayerId',
        'sport_radar_player_id' => 'setSportRadarPlayerId',
        'rotoworld_player_id' => 'setRotoworldPlayerId',
        'roto_wire_player_id' => 'setRotoWirePlayerId',
        'stats_player_id' => 'setStatsPlayerId',
        'sports_direct_player_id' => 'setSportsDirectPlayerId',
        'xml_team_player_id' => 'setXmlTeamPlayerId',
        'fan_duel_player_id' => 'setFanDuelPlayerId',
        'draft_kings_player_id' => 'setDraftKingsPlayerId',
        'yahoo_player_id' => 'setYahooPlayerId',
        'injury_status' => 'setInjuryStatus',
        'injury_body_part' => 'setInjuryBodyPart',
        'injury_start_date' => 'setInjuryStartDate',
        'injury_notes' => 'setInjuryNotes',
        'fan_duel_name' => 'setFanDuelName',
        'draft_kings_name' => 'setDraftKingsName',
        'yahoo_name' => 'setYahooName',
        'fantasy_position_depth_order' => 'setFantasyPositionDepthOrder',
        'injury_practice' => 'setInjuryPractice',
        'injury_practice_description' => 'setInjuryPracticeDescription',
        'declared_inactive' => 'setDeclaredInactive',
        'upcoming_fan_duel_salary' => 'setUpcomingFanDuelSalary',
        'upcoming_draft_kings_salary' => 'setUpcomingDraftKingsSalary',
        'upcoming_yahoo_salary' => 'setUpcomingYahooSalary',
        'team_id' => 'setTeamId',
        'global_team_id' => 'setGlobalTeamId',
        'fantasy_draft_player_id' => 'setFantasyDraftPlayerId',
        'fantasy_draft_name' => 'setFantasyDraftName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'player_season' => 'getPlayerSeason',
        'latest_news' => 'getLatestNews',
        'player_id' => 'getPlayerId',
        'team' => 'getTeam',
        'number' => 'getNumber',
        'first_name' => 'getFirstName',
        'last_name' => 'getLastName',
        'position' => 'getPosition',
        'status' => 'getStatus',
        'height' => 'getHeight',
        'weight' => 'getWeight',
        'birth_date' => 'getBirthDate',
        'college' => 'getCollege',
        'experience' => 'getExperience',
        'fantasy_position' => 'getFantasyPosition',
        'active' => 'getActive',
        'position_category' => 'getPositionCategory',
        'name' => 'getName',
        'age' => 'getAge',
        'experience_string' => 'getExperienceString',
        'birth_date_string' => 'getBirthDateString',
        'photo_url' => 'getPhotoUrl',
        'bye_week' => 'getByeWeek',
        'upcoming_game_opponent' => 'getUpcomingGameOpponent',
        'upcoming_game_week' => 'getUpcomingGameWeek',
        'short_name' => 'getShortName',
        'average_draft_position' => 'getAverageDraftPosition',
        'depth_position_category' => 'getDepthPositionCategory',
        'depth_position' => 'getDepthPosition',
        'depth_order' => 'getDepthOrder',
        'depth_display_order' => 'getDepthDisplayOrder',
        'current_team' => 'getCurrentTeam',
        'college_draft_team' => 'getCollegeDraftTeam',
        'college_draft_year' => 'getCollegeDraftYear',
        'college_draft_round' => 'getCollegeDraftRound',
        'college_draft_pick' => 'getCollegeDraftPick',
        'is_undrafted_free_agent' => 'getIsUndraftedFreeAgent',
        'height_feet' => 'getHeightFeet',
        'height_inches' => 'getHeightInches',
        'upcoming_opponent_rank' => 'getUpcomingOpponentRank',
        'upcoming_opponent_position_rank' => 'getUpcomingOpponentPositionRank',
        'current_status' => 'getCurrentStatus',
        'upcoming_salary' => 'getUpcomingSalary',
        'fantasy_alarm_player_id' => 'getFantasyAlarmPlayerId',
        'sport_radar_player_id' => 'getSportRadarPlayerId',
        'rotoworld_player_id' => 'getRotoworldPlayerId',
        'roto_wire_player_id' => 'getRotoWirePlayerId',
        'stats_player_id' => 'getStatsPlayerId',
        'sports_direct_player_id' => 'getSportsDirectPlayerId',
        'xml_team_player_id' => 'getXmlTeamPlayerId',
        'fan_duel_player_id' => 'getFanDuelPlayerId',
        'draft_kings_player_id' => 'getDraftKingsPlayerId',
        'yahoo_player_id' => 'getYahooPlayerId',
        'injury_status' => 'getInjuryStatus',
        'injury_body_part' => 'getInjuryBodyPart',
        'injury_start_date' => 'getInjuryStartDate',
        'injury_notes' => 'getInjuryNotes',
        'fan_duel_name' => 'getFanDuelName',
        'draft_kings_name' => 'getDraftKingsName',
        'yahoo_name' => 'getYahooName',
        'fantasy_position_depth_order' => 'getFantasyPositionDepthOrder',
        'injury_practice' => 'getInjuryPractice',
        'injury_practice_description' => 'getInjuryPracticeDescription',
        'declared_inactive' => 'getDeclaredInactive',
        'upcoming_fan_duel_salary' => 'getUpcomingFanDuelSalary',
        'upcoming_draft_kings_salary' => 'getUpcomingDraftKingsSalary',
        'upcoming_yahoo_salary' => 'getUpcomingYahooSalary',
        'team_id' => 'getTeamId',
        'global_team_id' => 'getGlobalTeamId',
        'fantasy_draft_player_id' => 'getFantasyDraftPlayerId',
        'fantasy_draft_name' => 'getFantasyDraftName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['player_season'] = isset($data['player_season']) ? $data['player_season'] : null;
        $this->container['latest_news'] = isset($data['latest_news']) ? $data['latest_news'] : null;
        $this->container['player_id'] = isset($data['player_id']) ? $data['player_id'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['first_name'] = isset($data['first_name']) ? $data['first_name'] : null;
        $this->container['last_name'] = isset($data['last_name']) ? $data['last_name'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['weight'] = isset($data['weight']) ? $data['weight'] : null;
        $this->container['birth_date'] = isset($data['birth_date']) ? $data['birth_date'] : null;
        $this->container['college'] = isset($data['college']) ? $data['college'] : null;
        $this->container['experience'] = isset($data['experience']) ? $data['experience'] : null;
        $this->container['fantasy_position'] = isset($data['fantasy_position']) ? $data['fantasy_position'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['position_category'] = isset($data['position_category']) ? $data['position_category'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['age'] = isset($data['age']) ? $data['age'] : null;
        $this->container['experience_string'] = isset($data['experience_string']) ? $data['experience_string'] : null;
        $this->container['birth_date_string'] = isset($data['birth_date_string']) ? $data['birth_date_string'] : null;
        $this->container['photo_url'] = isset($data['photo_url']) ? $data['photo_url'] : null;
        $this->container['bye_week'] = isset($data['bye_week']) ? $data['bye_week'] : null;
        $this->container['upcoming_game_opponent'] = isset($data['upcoming_game_opponent']) ? $data['upcoming_game_opponent'] : null;
        $this->container['upcoming_game_week'] = isset($data['upcoming_game_week']) ? $data['upcoming_game_week'] : null;
        $this->container['short_name'] = isset($data['short_name']) ? $data['short_name'] : null;
        $this->container['average_draft_position'] = isset($data['average_draft_position']) ? $data['average_draft_position'] : null;
        $this->container['depth_position_category'] = isset($data['depth_position_category']) ? $data['depth_position_category'] : null;
        $this->container['depth_position'] = isset($data['depth_position']) ? $data['depth_position'] : null;
        $this->container['depth_order'] = isset($data['depth_order']) ? $data['depth_order'] : null;
        $this->container['depth_display_order'] = isset($data['depth_display_order']) ? $data['depth_display_order'] : null;
        $this->container['current_team'] = isset($data['current_team']) ? $data['current_team'] : null;
        $this->container['college_draft_team'] = isset($data['college_draft_team']) ? $data['college_draft_team'] : null;
        $this->container['college_draft_year'] = isset($data['college_draft_year']) ? $data['college_draft_year'] : null;
        $this->container['college_draft_round'] = isset($data['college_draft_round']) ? $data['college_draft_round'] : null;
        $this->container['college_draft_pick'] = isset($data['college_draft_pick']) ? $data['college_draft_pick'] : null;
        $this->container['is_undrafted_free_agent'] = isset($data['is_undrafted_free_agent']) ? $data['is_undrafted_free_agent'] : null;
        $this->container['height_feet'] = isset($data['height_feet']) ? $data['height_feet'] : null;
        $this->container['height_inches'] = isset($data['height_inches']) ? $data['height_inches'] : null;
        $this->container['upcoming_opponent_rank'] = isset($data['upcoming_opponent_rank']) ? $data['upcoming_opponent_rank'] : null;
        $this->container['upcoming_opponent_position_rank'] = isset($data['upcoming_opponent_position_rank']) ? $data['upcoming_opponent_position_rank'] : null;
        $this->container['current_status'] = isset($data['current_status']) ? $data['current_status'] : null;
        $this->container['upcoming_salary'] = isset($data['upcoming_salary']) ? $data['upcoming_salary'] : null;
        $this->container['fantasy_alarm_player_id'] = isset($data['fantasy_alarm_player_id']) ? $data['fantasy_alarm_player_id'] : null;
        $this->container['sport_radar_player_id'] = isset($data['sport_radar_player_id']) ? $data['sport_radar_player_id'] : null;
        $this->container['rotoworld_player_id'] = isset($data['rotoworld_player_id']) ? $data['rotoworld_player_id'] : null;
        $this->container['roto_wire_player_id'] = isset($data['roto_wire_player_id']) ? $data['roto_wire_player_id'] : null;
        $this->container['stats_player_id'] = isset($data['stats_player_id']) ? $data['stats_player_id'] : null;
        $this->container['sports_direct_player_id'] = isset($data['sports_direct_player_id']) ? $data['sports_direct_player_id'] : null;
        $this->container['xml_team_player_id'] = isset($data['xml_team_player_id']) ? $data['xml_team_player_id'] : null;
        $this->container['fan_duel_player_id'] = isset($data['fan_duel_player_id']) ? $data['fan_duel_player_id'] : null;
        $this->container['draft_kings_player_id'] = isset($data['draft_kings_player_id']) ? $data['draft_kings_player_id'] : null;
        $this->container['yahoo_player_id'] = isset($data['yahoo_player_id']) ? $data['yahoo_player_id'] : null;
        $this->container['injury_status'] = isset($data['injury_status']) ? $data['injury_status'] : null;
        $this->container['injury_body_part'] = isset($data['injury_body_part']) ? $data['injury_body_part'] : null;
        $this->container['injury_start_date'] = isset($data['injury_start_date']) ? $data['injury_start_date'] : null;
        $this->container['injury_notes'] = isset($data['injury_notes']) ? $data['injury_notes'] : null;
        $this->container['fan_duel_name'] = isset($data['fan_duel_name']) ? $data['fan_duel_name'] : null;
        $this->container['draft_kings_name'] = isset($data['draft_kings_name']) ? $data['draft_kings_name'] : null;
        $this->container['yahoo_name'] = isset($data['yahoo_name']) ? $data['yahoo_name'] : null;
        $this->container['fantasy_position_depth_order'] = isset($data['fantasy_position_depth_order']) ? $data['fantasy_position_depth_order'] : null;
        $this->container['injury_practice'] = isset($data['injury_practice']) ? $data['injury_practice'] : null;
        $this->container['injury_practice_description'] = isset($data['injury_practice_description']) ? $data['injury_practice_description'] : null;
        $this->container['declared_inactive'] = isset($data['declared_inactive']) ? $data['declared_inactive'] : null;
        $this->container['upcoming_fan_duel_salary'] = isset($data['upcoming_fan_duel_salary']) ? $data['upcoming_fan_duel_salary'] : null;
        $this->container['upcoming_draft_kings_salary'] = isset($data['upcoming_draft_kings_salary']) ? $data['upcoming_draft_kings_salary'] : null;
        $this->container['upcoming_yahoo_salary'] = isset($data['upcoming_yahoo_salary']) ? $data['upcoming_yahoo_salary'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['global_team_id'] = isset($data['global_team_id']) ? $data['global_team_id'] : null;
        $this->container['fantasy_draft_player_id'] = isset($data['fantasy_draft_player_id']) ? $data['fantasy_draft_player_id'] : null;
        $this->container['fantasy_draft_name'] = isset($data['fantasy_draft_name']) ? $data['fantasy_draft_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets player_season
     *
     * @return \Acme\FantasyDataStats\\PlayerSeason
     */
    public function getPlayerSeason()
    {
        return $this->container['player_season'];
    }

    /**
     * Sets player_season
     *
     * @param \Acme\FantasyDataStats\\PlayerSeason $player_season player_season
     *
     * @return $this
     */
    public function setPlayerSeason($player_season)
    {
        $this->container['player_season'] = $player_season;

        return $this;
    }

    /**
     * Gets latest_news
     *
     * @return \Acme\FantasyDataStats\\News[]
     */
    public function getLatestNews()
    {
        return $this->container['latest_news'];
    }

    /**
     * Sets latest_news
     *
     * @param \Acme\FantasyDataStats\\News[] $latest_news latest_news
     *
     * @return $this
     */
    public function setLatestNews($latest_news)
    {
        $this->container['latest_news'] = $latest_news;

        return $this;
    }

    /**
     * Gets player_id
     *
     * @return int
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param int $player_id player_id
     *
     * @return $this
     */
    public function setPlayerId($player_id)
    {
        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets first_name
     *
     * @return string
     */
    public function getFirstName()
    {
        return $this->container['first_name'];
    }

    /**
     * Sets first_name
     *
     * @param string $first_name first_name
     *
     * @return $this
     */
    public function setFirstName($first_name)
    {
        $this->container['first_name'] = $first_name;

        return $this;
    }

    /**
     * Gets last_name
     *
     * @return string
     */
    public function getLastName()
    {
        return $this->container['last_name'];
    }

    /**
     * Sets last_name
     *
     * @param string $last_name last_name
     *
     * @return $this
     */
    public function setLastName($last_name)
    {
        $this->container['last_name'] = $last_name;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets status
     *
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param string $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets height
     *
     * @return string
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param string $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets weight
     *
     * @return int
     */
    public function getWeight()
    {
        return $this->container['weight'];
    }

    /**
     * Sets weight
     *
     * @param int $weight weight
     *
     * @return $this
     */
    public function setWeight($weight)
    {
        $this->container['weight'] = $weight;

        return $this;
    }

    /**
     * Gets birth_date
     *
     * @return string
     */
    public function getBirthDate()
    {
        return $this->container['birth_date'];
    }

    /**
     * Sets birth_date
     *
     * @param string $birth_date birth_date
     *
     * @return $this
     */
    public function setBirthDate($birth_date)
    {
        $this->container['birth_date'] = $birth_date;

        return $this;
    }

    /**
     * Gets college
     *
     * @return string
     */
    public function getCollege()
    {
        return $this->container['college'];
    }

    /**
     * Sets college
     *
     * @param string $college college
     *
     * @return $this
     */
    public function setCollege($college)
    {
        $this->container['college'] = $college;

        return $this;
    }

    /**
     * Gets experience
     *
     * @return int
     */
    public function getExperience()
    {
        return $this->container['experience'];
    }

    /**
     * Sets experience
     *
     * @param int $experience experience
     *
     * @return $this
     */
    public function setExperience($experience)
    {
        $this->container['experience'] = $experience;

        return $this;
    }

    /**
     * Gets fantasy_position
     *
     * @return string
     */
    public function getFantasyPosition()
    {
        return $this->container['fantasy_position'];
    }

    /**
     * Sets fantasy_position
     *
     * @param string $fantasy_position fantasy_position
     *
     * @return $this
     */
    public function setFantasyPosition($fantasy_position)
    {
        $this->container['fantasy_position'] = $fantasy_position;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets position_category
     *
     * @return string
     */
    public function getPositionCategory()
    {
        return $this->container['position_category'];
    }

    /**
     * Sets position_category
     *
     * @param string $position_category position_category
     *
     * @return $this
     */
    public function setPositionCategory($position_category)
    {
        $this->container['position_category'] = $position_category;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets age
     *
     * @return int
     */
    public function getAge()
    {
        return $this->container['age'];
    }

    /**
     * Sets age
     *
     * @param int $age age
     *
     * @return $this
     */
    public function setAge($age)
    {
        $this->container['age'] = $age;

        return $this;
    }

    /**
     * Gets experience_string
     *
     * @return string
     */
    public function getExperienceString()
    {
        return $this->container['experience_string'];
    }

    /**
     * Sets experience_string
     *
     * @param string $experience_string experience_string
     *
     * @return $this
     */
    public function setExperienceString($experience_string)
    {
        $this->container['experience_string'] = $experience_string;

        return $this;
    }

    /**
     * Gets birth_date_string
     *
     * @return string
     */
    public function getBirthDateString()
    {
        return $this->container['birth_date_string'];
    }

    /**
     * Sets birth_date_string
     *
     * @param string $birth_date_string birth_date_string
     *
     * @return $this
     */
    public function setBirthDateString($birth_date_string)
    {
        $this->container['birth_date_string'] = $birth_date_string;

        return $this;
    }

    /**
     * Gets photo_url
     *
     * @return string
     */
    public function getPhotoUrl()
    {
        return $this->container['photo_url'];
    }

    /**
     * Sets photo_url
     *
     * @param string $photo_url photo_url
     *
     * @return $this
     */
    public function setPhotoUrl($photo_url)
    {
        $this->container['photo_url'] = $photo_url;

        return $this;
    }

    /**
     * Gets bye_week
     *
     * @return int
     */
    public function getByeWeek()
    {
        return $this->container['bye_week'];
    }

    /**
     * Sets bye_week
     *
     * @param int $bye_week bye_week
     *
     * @return $this
     */
    public function setByeWeek($bye_week)
    {
        $this->container['bye_week'] = $bye_week;

        return $this;
    }

    /**
     * Gets upcoming_game_opponent
     *
     * @return string
     */
    public function getUpcomingGameOpponent()
    {
        return $this->container['upcoming_game_opponent'];
    }

    /**
     * Sets upcoming_game_opponent
     *
     * @param string $upcoming_game_opponent upcoming_game_opponent
     *
     * @return $this
     */
    public function setUpcomingGameOpponent($upcoming_game_opponent)
    {
        $this->container['upcoming_game_opponent'] = $upcoming_game_opponent;

        return $this;
    }

    /**
     * Gets upcoming_game_week
     *
     * @return int
     */
    public function getUpcomingGameWeek()
    {
        return $this->container['upcoming_game_week'];
    }

    /**
     * Sets upcoming_game_week
     *
     * @param int $upcoming_game_week upcoming_game_week
     *
     * @return $this
     */
    public function setUpcomingGameWeek($upcoming_game_week)
    {
        $this->container['upcoming_game_week'] = $upcoming_game_week;

        return $this;
    }

    /**
     * Gets short_name
     *
     * @return string
     */
    public function getShortName()
    {
        return $this->container['short_name'];
    }

    /**
     * Sets short_name
     *
     * @param string $short_name short_name
     *
     * @return $this
     */
    public function setShortName($short_name)
    {
        $this->container['short_name'] = $short_name;

        return $this;
    }

    /**
     * Gets average_draft_position
     *
     * @return float
     */
    public function getAverageDraftPosition()
    {
        return $this->container['average_draft_position'];
    }

    /**
     * Sets average_draft_position
     *
     * @param float $average_draft_position average_draft_position
     *
     * @return $this
     */
    public function setAverageDraftPosition($average_draft_position)
    {
        $this->container['average_draft_position'] = $average_draft_position;

        return $this;
    }

    /**
     * Gets depth_position_category
     *
     * @return string
     */
    public function getDepthPositionCategory()
    {
        return $this->container['depth_position_category'];
    }

    /**
     * Sets depth_position_category
     *
     * @param string $depth_position_category depth_position_category
     *
     * @return $this
     */
    public function setDepthPositionCategory($depth_position_category)
    {
        $this->container['depth_position_category'] = $depth_position_category;

        return $this;
    }

    /**
     * Gets depth_position
     *
     * @return string
     */
    public function getDepthPosition()
    {
        return $this->container['depth_position'];
    }

    /**
     * Sets depth_position
     *
     * @param string $depth_position depth_position
     *
     * @return $this
     */
    public function setDepthPosition($depth_position)
    {
        $this->container['depth_position'] = $depth_position;

        return $this;
    }

    /**
     * Gets depth_order
     *
     * @return int
     */
    public function getDepthOrder()
    {
        return $this->container['depth_order'];
    }

    /**
     * Sets depth_order
     *
     * @param int $depth_order depth_order
     *
     * @return $this
     */
    public function setDepthOrder($depth_order)
    {
        $this->container['depth_order'] = $depth_order;

        return $this;
    }

    /**
     * Gets depth_display_order
     *
     * @return int
     */
    public function getDepthDisplayOrder()
    {
        return $this->container['depth_display_order'];
    }

    /**
     * Sets depth_display_order
     *
     * @param int $depth_display_order depth_display_order
     *
     * @return $this
     */
    public function setDepthDisplayOrder($depth_display_order)
    {
        $this->container['depth_display_order'] = $depth_display_order;

        return $this;
    }

    /**
     * Gets current_team
     *
     * @return string
     */
    public function getCurrentTeam()
    {
        return $this->container['current_team'];
    }

    /**
     * Sets current_team
     *
     * @param string $current_team current_team
     *
     * @return $this
     */
    public function setCurrentTeam($current_team)
    {
        $this->container['current_team'] = $current_team;

        return $this;
    }

    /**
     * Gets college_draft_team
     *
     * @return string
     */
    public function getCollegeDraftTeam()
    {
        return $this->container['college_draft_team'];
    }

    /**
     * Sets college_draft_team
     *
     * @param string $college_draft_team college_draft_team
     *
     * @return $this
     */
    public function setCollegeDraftTeam($college_draft_team)
    {
        $this->container['college_draft_team'] = $college_draft_team;

        return $this;
    }

    /**
     * Gets college_draft_year
     *
     * @return int
     */
    public function getCollegeDraftYear()
    {
        return $this->container['college_draft_year'];
    }

    /**
     * Sets college_draft_year
     *
     * @param int $college_draft_year college_draft_year
     *
     * @return $this
     */
    public function setCollegeDraftYear($college_draft_year)
    {
        $this->container['college_draft_year'] = $college_draft_year;

        return $this;
    }

    /**
     * Gets college_draft_round
     *
     * @return int
     */
    public function getCollegeDraftRound()
    {
        return $this->container['college_draft_round'];
    }

    /**
     * Sets college_draft_round
     *
     * @param int $college_draft_round college_draft_round
     *
     * @return $this
     */
    public function setCollegeDraftRound($college_draft_round)
    {
        $this->container['college_draft_round'] = $college_draft_round;

        return $this;
    }

    /**
     * Gets college_draft_pick
     *
     * @return int
     */
    public function getCollegeDraftPick()
    {
        return $this->container['college_draft_pick'];
    }

    /**
     * Sets college_draft_pick
     *
     * @param int $college_draft_pick college_draft_pick
     *
     * @return $this
     */
    public function setCollegeDraftPick($college_draft_pick)
    {
        $this->container['college_draft_pick'] = $college_draft_pick;

        return $this;
    }

    /**
     * Gets is_undrafted_free_agent
     *
     * @return bool
     */
    public function getIsUndraftedFreeAgent()
    {
        return $this->container['is_undrafted_free_agent'];
    }

    /**
     * Sets is_undrafted_free_agent
     *
     * @param bool $is_undrafted_free_agent is_undrafted_free_agent
     *
     * @return $this
     */
    public function setIsUndraftedFreeAgent($is_undrafted_free_agent)
    {
        $this->container['is_undrafted_free_agent'] = $is_undrafted_free_agent;

        return $this;
    }

    /**
     * Gets height_feet
     *
     * @return int
     */
    public function getHeightFeet()
    {
        return $this->container['height_feet'];
    }

    /**
     * Sets height_feet
     *
     * @param int $height_feet height_feet
     *
     * @return $this
     */
    public function setHeightFeet($height_feet)
    {
        $this->container['height_feet'] = $height_feet;

        return $this;
    }

    /**
     * Gets height_inches
     *
     * @return int
     */
    public function getHeightInches()
    {
        return $this->container['height_inches'];
    }

    /**
     * Sets height_inches
     *
     * @param int $height_inches height_inches
     *
     * @return $this
     */
    public function setHeightInches($height_inches)
    {
        $this->container['height_inches'] = $height_inches;

        return $this;
    }

    /**
     * Gets upcoming_opponent_rank
     *
     * @return int
     */
    public function getUpcomingOpponentRank()
    {
        return $this->container['upcoming_opponent_rank'];
    }

    /**
     * Sets upcoming_opponent_rank
     *
     * @param int $upcoming_opponent_rank upcoming_opponent_rank
     *
     * @return $this
     */
    public function setUpcomingOpponentRank($upcoming_opponent_rank)
    {
        $this->container['upcoming_opponent_rank'] = $upcoming_opponent_rank;

        return $this;
    }

    /**
     * Gets upcoming_opponent_position_rank
     *
     * @return int
     */
    public function getUpcomingOpponentPositionRank()
    {
        return $this->container['upcoming_opponent_position_rank'];
    }

    /**
     * Sets upcoming_opponent_position_rank
     *
     * @param int $upcoming_opponent_position_rank upcoming_opponent_position_rank
     *
     * @return $this
     */
    public function setUpcomingOpponentPositionRank($upcoming_opponent_position_rank)
    {
        $this->container['upcoming_opponent_position_rank'] = $upcoming_opponent_position_rank;

        return $this;
    }

    /**
     * Gets current_status
     *
     * @return string
     */
    public function getCurrentStatus()
    {
        return $this->container['current_status'];
    }

    /**
     * Sets current_status
     *
     * @param string $current_status current_status
     *
     * @return $this
     */
    public function setCurrentStatus($current_status)
    {
        $this->container['current_status'] = $current_status;

        return $this;
    }

    /**
     * Gets upcoming_salary
     *
     * @return int
     */
    public function getUpcomingSalary()
    {
        return $this->container['upcoming_salary'];
    }

    /**
     * Sets upcoming_salary
     *
     * @param int $upcoming_salary upcoming_salary
     *
     * @return $this
     */
    public function setUpcomingSalary($upcoming_salary)
    {
        $this->container['upcoming_salary'] = $upcoming_salary;

        return $this;
    }

    /**
     * Gets fantasy_alarm_player_id
     *
     * @return int
     */
    public function getFantasyAlarmPlayerId()
    {
        return $this->container['fantasy_alarm_player_id'];
    }

    /**
     * Sets fantasy_alarm_player_id
     *
     * @param int $fantasy_alarm_player_id fantasy_alarm_player_id
     *
     * @return $this
     */
    public function setFantasyAlarmPlayerId($fantasy_alarm_player_id)
    {
        $this->container['fantasy_alarm_player_id'] = $fantasy_alarm_player_id;

        return $this;
    }

    /**
     * Gets sport_radar_player_id
     *
     * @return string
     */
    public function getSportRadarPlayerId()
    {
        return $this->container['sport_radar_player_id'];
    }

    /**
     * Sets sport_radar_player_id
     *
     * @param string $sport_radar_player_id sport_radar_player_id
     *
     * @return $this
     */
    public function setSportRadarPlayerId($sport_radar_player_id)
    {
        $this->container['sport_radar_player_id'] = $sport_radar_player_id;

        return $this;
    }

    /**
     * Gets rotoworld_player_id
     *
     * @return int
     */
    public function getRotoworldPlayerId()
    {
        return $this->container['rotoworld_player_id'];
    }

    /**
     * Sets rotoworld_player_id
     *
     * @param int $rotoworld_player_id rotoworld_player_id
     *
     * @return $this
     */
    public function setRotoworldPlayerId($rotoworld_player_id)
    {
        $this->container['rotoworld_player_id'] = $rotoworld_player_id;

        return $this;
    }

    /**
     * Gets roto_wire_player_id
     *
     * @return int
     */
    public function getRotoWirePlayerId()
    {
        return $this->container['roto_wire_player_id'];
    }

    /**
     * Sets roto_wire_player_id
     *
     * @param int $roto_wire_player_id roto_wire_player_id
     *
     * @return $this
     */
    public function setRotoWirePlayerId($roto_wire_player_id)
    {
        $this->container['roto_wire_player_id'] = $roto_wire_player_id;

        return $this;
    }

    /**
     * Gets stats_player_id
     *
     * @return int
     */
    public function getStatsPlayerId()
    {
        return $this->container['stats_player_id'];
    }

    /**
     * Sets stats_player_id
     *
     * @param int $stats_player_id stats_player_id
     *
     * @return $this
     */
    public function setStatsPlayerId($stats_player_id)
    {
        $this->container['stats_player_id'] = $stats_player_id;

        return $this;
    }

    /**
     * Gets sports_direct_player_id
     *
     * @return int
     */
    public function getSportsDirectPlayerId()
    {
        return $this->container['sports_direct_player_id'];
    }

    /**
     * Sets sports_direct_player_id
     *
     * @param int $sports_direct_player_id sports_direct_player_id
     *
     * @return $this
     */
    public function setSportsDirectPlayerId($sports_direct_player_id)
    {
        $this->container['sports_direct_player_id'] = $sports_direct_player_id;

        return $this;
    }

    /**
     * Gets xml_team_player_id
     *
     * @return int
     */
    public function getXmlTeamPlayerId()
    {
        return $this->container['xml_team_player_id'];
    }

    /**
     * Sets xml_team_player_id
     *
     * @param int $xml_team_player_id xml_team_player_id
     *
     * @return $this
     */
    public function setXmlTeamPlayerId($xml_team_player_id)
    {
        $this->container['xml_team_player_id'] = $xml_team_player_id;

        return $this;
    }

    /**
     * Gets fan_duel_player_id
     *
     * @return int
     */
    public function getFanDuelPlayerId()
    {
        return $this->container['fan_duel_player_id'];
    }

    /**
     * Sets fan_duel_player_id
     *
     * @param int $fan_duel_player_id fan_duel_player_id
     *
     * @return $this
     */
    public function setFanDuelPlayerId($fan_duel_player_id)
    {
        $this->container['fan_duel_player_id'] = $fan_duel_player_id;

        return $this;
    }

    /**
     * Gets draft_kings_player_id
     *
     * @return int
     */
    public function getDraftKingsPlayerId()
    {
        return $this->container['draft_kings_player_id'];
    }

    /**
     * Sets draft_kings_player_id
     *
     * @param int $draft_kings_player_id draft_kings_player_id
     *
     * @return $this
     */
    public function setDraftKingsPlayerId($draft_kings_player_id)
    {
        $this->container['draft_kings_player_id'] = $draft_kings_player_id;

        return $this;
    }

    /**
     * Gets yahoo_player_id
     *
     * @return int
     */
    public function getYahooPlayerId()
    {
        return $this->container['yahoo_player_id'];
    }

    /**
     * Sets yahoo_player_id
     *
     * @param int $yahoo_player_id yahoo_player_id
     *
     * @return $this
     */
    public function setYahooPlayerId($yahoo_player_id)
    {
        $this->container['yahoo_player_id'] = $yahoo_player_id;

        return $this;
    }

    /**
     * Gets injury_status
     *
     * @return string
     */
    public function getInjuryStatus()
    {
        return $this->container['injury_status'];
    }

    /**
     * Sets injury_status
     *
     * @param string $injury_status injury_status
     *
     * @return $this
     */
    public function setInjuryStatus($injury_status)
    {
        $this->container['injury_status'] = $injury_status;

        return $this;
    }

    /**
     * Gets injury_body_part
     *
     * @return string
     */
    public function getInjuryBodyPart()
    {
        return $this->container['injury_body_part'];
    }

    /**
     * Sets injury_body_part
     *
     * @param string $injury_body_part injury_body_part
     *
     * @return $this
     */
    public function setInjuryBodyPart($injury_body_part)
    {
        $this->container['injury_body_part'] = $injury_body_part;

        return $this;
    }

    /**
     * Gets injury_start_date
     *
     * @return string
     */
    public function getInjuryStartDate()
    {
        return $this->container['injury_start_date'];
    }

    /**
     * Sets injury_start_date
     *
     * @param string $injury_start_date injury_start_date
     *
     * @return $this
     */
    public function setInjuryStartDate($injury_start_date)
    {
        $this->container['injury_start_date'] = $injury_start_date;

        return $this;
    }

    /**
     * Gets injury_notes
     *
     * @return string
     */
    public function getInjuryNotes()
    {
        return $this->container['injury_notes'];
    }

    /**
     * Sets injury_notes
     *
     * @param string $injury_notes injury_notes
     *
     * @return $this
     */
    public function setInjuryNotes($injury_notes)
    {
        $this->container['injury_notes'] = $injury_notes;

        return $this;
    }

    /**
     * Gets fan_duel_name
     *
     * @return string
     */
    public function getFanDuelName()
    {
        return $this->container['fan_duel_name'];
    }

    /**
     * Sets fan_duel_name
     *
     * @param string $fan_duel_name fan_duel_name
     *
     * @return $this
     */
    public function setFanDuelName($fan_duel_name)
    {
        $this->container['fan_duel_name'] = $fan_duel_name;

        return $this;
    }

    /**
     * Gets draft_kings_name
     *
     * @return string
     */
    public function getDraftKingsName()
    {
        return $this->container['draft_kings_name'];
    }

    /**
     * Sets draft_kings_name
     *
     * @param string $draft_kings_name draft_kings_name
     *
     * @return $this
     */
    public function setDraftKingsName($draft_kings_name)
    {
        $this->container['draft_kings_name'] = $draft_kings_name;

        return $this;
    }

    /**
     * Gets yahoo_name
     *
     * @return string
     */
    public function getYahooName()
    {
        return $this->container['yahoo_name'];
    }

    /**
     * Sets yahoo_name
     *
     * @param string $yahoo_name yahoo_name
     *
     * @return $this
     */
    public function setYahooName($yahoo_name)
    {
        $this->container['yahoo_name'] = $yahoo_name;

        return $this;
    }

    /**
     * Gets fantasy_position_depth_order
     *
     * @return int
     */
    public function getFantasyPositionDepthOrder()
    {
        return $this->container['fantasy_position_depth_order'];
    }

    /**
     * Sets fantasy_position_depth_order
     *
     * @param int $fantasy_position_depth_order fantasy_position_depth_order
     *
     * @return $this
     */
    public function setFantasyPositionDepthOrder($fantasy_position_depth_order)
    {
        $this->container['fantasy_position_depth_order'] = $fantasy_position_depth_order;

        return $this;
    }

    /**
     * Gets injury_practice
     *
     * @return string
     */
    public function getInjuryPractice()
    {
        return $this->container['injury_practice'];
    }

    /**
     * Sets injury_practice
     *
     * @param string $injury_practice injury_practice
     *
     * @return $this
     */
    public function setInjuryPractice($injury_practice)
    {
        $this->container['injury_practice'] = $injury_practice;

        return $this;
    }

    /**
     * Gets injury_practice_description
     *
     * @return string
     */
    public function getInjuryPracticeDescription()
    {
        return $this->container['injury_practice_description'];
    }

    /**
     * Sets injury_practice_description
     *
     * @param string $injury_practice_description injury_practice_description
     *
     * @return $this
     */
    public function setInjuryPracticeDescription($injury_practice_description)
    {
        $this->container['injury_practice_description'] = $injury_practice_description;

        return $this;
    }

    /**
     * Gets declared_inactive
     *
     * @return bool
     */
    public function getDeclaredInactive()
    {
        return $this->container['declared_inactive'];
    }

    /**
     * Sets declared_inactive
     *
     * @param bool $declared_inactive declared_inactive
     *
     * @return $this
     */
    public function setDeclaredInactive($declared_inactive)
    {
        $this->container['declared_inactive'] = $declared_inactive;

        return $this;
    }

    /**
     * Gets upcoming_fan_duel_salary
     *
     * @return int
     */
    public function getUpcomingFanDuelSalary()
    {
        return $this->container['upcoming_fan_duel_salary'];
    }

    /**
     * Sets upcoming_fan_duel_salary
     *
     * @param int $upcoming_fan_duel_salary upcoming_fan_duel_salary
     *
     * @return $this
     */
    public function setUpcomingFanDuelSalary($upcoming_fan_duel_salary)
    {
        $this->container['upcoming_fan_duel_salary'] = $upcoming_fan_duel_salary;

        return $this;
    }

    /**
     * Gets upcoming_draft_kings_salary
     *
     * @return int
     */
    public function getUpcomingDraftKingsSalary()
    {
        return $this->container['upcoming_draft_kings_salary'];
    }

    /**
     * Sets upcoming_draft_kings_salary
     *
     * @param int $upcoming_draft_kings_salary upcoming_draft_kings_salary
     *
     * @return $this
     */
    public function setUpcomingDraftKingsSalary($upcoming_draft_kings_salary)
    {
        $this->container['upcoming_draft_kings_salary'] = $upcoming_draft_kings_salary;

        return $this;
    }

    /**
     * Gets upcoming_yahoo_salary
     *
     * @return int
     */
    public function getUpcomingYahooSalary()
    {
        return $this->container['upcoming_yahoo_salary'];
    }

    /**
     * Sets upcoming_yahoo_salary
     *
     * @param int $upcoming_yahoo_salary upcoming_yahoo_salary
     *
     * @return $this
     */
    public function setUpcomingYahooSalary($upcoming_yahoo_salary)
    {
        $this->container['upcoming_yahoo_salary'] = $upcoming_yahoo_salary;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int $team_id team_id
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets global_team_id
     *
     * @return int
     */
    public function getGlobalTeamId()
    {
        return $this->container['global_team_id'];
    }

    /**
     * Sets global_team_id
     *
     * @param int $global_team_id global_team_id
     *
     * @return $this
     */
    public function setGlobalTeamId($global_team_id)
    {
        $this->container['global_team_id'] = $global_team_id;

        return $this;
    }

    /**
     * Gets fantasy_draft_player_id
     *
     * @return int
     */
    public function getFantasyDraftPlayerId()
    {
        return $this->container['fantasy_draft_player_id'];
    }

    /**
     * Sets fantasy_draft_player_id
     *
     * @param int $fantasy_draft_player_id fantasy_draft_player_id
     *
     * @return $this
     */
    public function setFantasyDraftPlayerId($fantasy_draft_player_id)
    {
        $this->container['fantasy_draft_player_id'] = $fantasy_draft_player_id;

        return $this;
    }

    /**
     * Gets fantasy_draft_name
     *
     * @return string
     */
    public function getFantasyDraftName()
    {
        return $this->container['fantasy_draft_name'];
    }

    /**
     * Sets fantasy_draft_name
     *
     * @param string $fantasy_draft_name fantasy_draft_name
     *
     * @return $this
     */
    public function setFantasyDraftName($fantasy_draft_name)
    {
        $this->container['fantasy_draft_name'] = $fantasy_draft_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

