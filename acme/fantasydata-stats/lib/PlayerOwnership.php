<?php
/**
 * PlayerOwnership
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acme\FantasyDataStats
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NFL v3 Stats
 *
 * NFL rosters, player stats, team stats, and fantasy stats API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acme\FantasyDataStats;

use \ArrayAccess;
use \Acme\FantasyDataStats\ObjectSerializer;

/**
 * PlayerOwnership Class Doc Comment
 *
 * @category Class
 * @package     Acme\FantasyDataStats
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PlayerOwnership implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'PlayerOwnership';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'player_id' => 'int',
        'season' => 'int',
        'season_type' => 'int',
        'week' => 'int',
        'name' => 'string',
        'position' => 'string',
        'team' => 'string',
        'team_id' => 'int',
        'ownership_percentage' => 'float',
        'delta_ownership_percentage' => 'float',
        'start_percentage' => 'float',
        'delta_start_percentage' => 'float'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'player_id' => null,
        'season' => null,
        'season_type' => null,
        'week' => null,
        'name' => null,
        'position' => null,
        'team' => null,
        'team_id' => null,
        'ownership_percentage' => null,
        'delta_ownership_percentage' => null,
        'start_percentage' => null,
        'delta_start_percentage' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'player_id' => 'PlayerID',
        'season' => 'Season',
        'season_type' => 'SeasonType',
        'week' => 'Week',
        'name' => 'Name',
        'position' => 'Position',
        'team' => 'Team',
        'team_id' => 'TeamID',
        'ownership_percentage' => 'OwnershipPercentage',
        'delta_ownership_percentage' => 'DeltaOwnershipPercentage',
        'start_percentage' => 'StartPercentage',
        'delta_start_percentage' => 'DeltaStartPercentage'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'player_id' => 'setPlayerId',
        'season' => 'setSeason',
        'season_type' => 'setSeasonType',
        'week' => 'setWeek',
        'name' => 'setName',
        'position' => 'setPosition',
        'team' => 'setTeam',
        'team_id' => 'setTeamId',
        'ownership_percentage' => 'setOwnershipPercentage',
        'delta_ownership_percentage' => 'setDeltaOwnershipPercentage',
        'start_percentage' => 'setStartPercentage',
        'delta_start_percentage' => 'setDeltaStartPercentage'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'player_id' => 'getPlayerId',
        'season' => 'getSeason',
        'season_type' => 'getSeasonType',
        'week' => 'getWeek',
        'name' => 'getName',
        'position' => 'getPosition',
        'team' => 'getTeam',
        'team_id' => 'getTeamId',
        'ownership_percentage' => 'getOwnershipPercentage',
        'delta_ownership_percentage' => 'getDeltaOwnershipPercentage',
        'start_percentage' => 'getStartPercentage',
        'delta_start_percentage' => 'getDeltaStartPercentage'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['player_id'] = isset($data['player_id']) ? $data['player_id'] : null;
        $this->container['season'] = isset($data['season']) ? $data['season'] : null;
        $this->container['season_type'] = isset($data['season_type']) ? $data['season_type'] : null;
        $this->container['week'] = isset($data['week']) ? $data['week'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['position'] = isset($data['position']) ? $data['position'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['team_id'] = isset($data['team_id']) ? $data['team_id'] : null;
        $this->container['ownership_percentage'] = isset($data['ownership_percentage']) ? $data['ownership_percentage'] : null;
        $this->container['delta_ownership_percentage'] = isset($data['delta_ownership_percentage']) ? $data['delta_ownership_percentage'] : null;
        $this->container['start_percentage'] = isset($data['start_percentage']) ? $data['start_percentage'] : null;
        $this->container['delta_start_percentage'] = isset($data['delta_start_percentage']) ? $data['delta_start_percentage'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets player_id
     *
     * @return int
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param int $player_id player_id
     *
     * @return $this
     */
    public function setPlayerId($player_id)
    {
        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets season
     *
     * @return int
     */
    public function getSeason()
    {
        return $this->container['season'];
    }

    /**
     * Sets season
     *
     * @param int $season season
     *
     * @return $this
     */
    public function setSeason($season)
    {
        $this->container['season'] = $season;

        return $this;
    }

    /**
     * Gets season_type
     *
     * @return int
     */
    public function getSeasonType()
    {
        return $this->container['season_type'];
    }

    /**
     * Sets season_type
     *
     * @param int $season_type season_type
     *
     * @return $this
     */
    public function setSeasonType($season_type)
    {
        $this->container['season_type'] = $season_type;

        return $this;
    }

    /**
     * Gets week
     *
     * @return int
     */
    public function getWeek()
    {
        return $this->container['week'];
    }

    /**
     * Sets week
     *
     * @param int $week week
     *
     * @return $this
     */
    public function setWeek($week)
    {
        $this->container['week'] = $week;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets position
     *
     * @return string
     */
    public function getPosition()
    {
        return $this->container['position'];
    }

    /**
     * Sets position
     *
     * @param string $position position
     *
     * @return $this
     */
    public function setPosition($position)
    {
        $this->container['position'] = $position;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets team_id
     *
     * @return int
     */
    public function getTeamId()
    {
        return $this->container['team_id'];
    }

    /**
     * Sets team_id
     *
     * @param int $team_id team_id
     *
     * @return $this
     */
    public function setTeamId($team_id)
    {
        $this->container['team_id'] = $team_id;

        return $this;
    }

    /**
     * Gets ownership_percentage
     *
     * @return float
     */
    public function getOwnershipPercentage()
    {
        return $this->container['ownership_percentage'];
    }

    /**
     * Sets ownership_percentage
     *
     * @param float $ownership_percentage ownership_percentage
     *
     * @return $this
     */
    public function setOwnershipPercentage($ownership_percentage)
    {
        $this->container['ownership_percentage'] = $ownership_percentage;

        return $this;
    }

    /**
     * Gets delta_ownership_percentage
     *
     * @return float
     */
    public function getDeltaOwnershipPercentage()
    {
        return $this->container['delta_ownership_percentage'];
    }

    /**
     * Sets delta_ownership_percentage
     *
     * @param float $delta_ownership_percentage delta_ownership_percentage
     *
     * @return $this
     */
    public function setDeltaOwnershipPercentage($delta_ownership_percentage)
    {
        $this->container['delta_ownership_percentage'] = $delta_ownership_percentage;

        return $this;
    }

    /**
     * Gets start_percentage
     *
     * @return float
     */
    public function getStartPercentage()
    {
        return $this->container['start_percentage'];
    }

    /**
     * Sets start_percentage
     *
     * @param float $start_percentage start_percentage
     *
     * @return $this
     */
    public function setStartPercentage($start_percentage)
    {
        $this->container['start_percentage'] = $start_percentage;

        return $this;
    }

    /**
     * Gets delta_start_percentage
     *
     * @return float
     */
    public function getDeltaStartPercentage()
    {
        return $this->container['delta_start_percentage'];
    }

    /**
     * Sets delta_start_percentage
     *
     * @param float $delta_start_percentage delta_start_percentage
     *
     * @return $this
     */
    public function setDeltaStartPercentage($delta_start_percentage)
    {
        $this->container['delta_start_percentage'] = $delta_start_percentage;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

