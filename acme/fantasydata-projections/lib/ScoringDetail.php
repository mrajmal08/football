<?php
/**
 * ScoringDetail
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acme\FantasyDataProjections
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NFL v3 Projections
 *
 * NFL projected stats API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acme\FantasyDataProjections;

use \ArrayAccess;
use \Acme\FantasyDataProjections\ObjectSerializer;

/**
 * ScoringDetail Class Doc Comment
 *
 * @category Class
 * @package     Acme\FantasyDataProjections
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class ScoringDetail implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ScoringDetail';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'game_key' => 'string',
        'season_type' => 'int',
        'player_id' => 'int',
        'team' => 'string',
        'season' => 'int',
        'week' => 'int',
        'scoring_type' => 'string',
        'length' => 'int',
        'scoring_detail_id' => 'int',
        'player_game_id' => 'int',
        'score_id' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'game_key' => null,
        'season_type' => null,
        'player_id' => null,
        'team' => null,
        'season' => null,
        'week' => null,
        'scoring_type' => null,
        'length' => null,
        'scoring_detail_id' => null,
        'player_game_id' => null,
        'score_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'game_key' => 'GameKey',
        'season_type' => 'SeasonType',
        'player_id' => 'PlayerID',
        'team' => 'Team',
        'season' => 'Season',
        'week' => 'Week',
        'scoring_type' => 'ScoringType',
        'length' => 'Length',
        'scoring_detail_id' => 'ScoringDetailID',
        'player_game_id' => 'PlayerGameID',
        'score_id' => 'ScoreID'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'game_key' => 'setGameKey',
        'season_type' => 'setSeasonType',
        'player_id' => 'setPlayerId',
        'team' => 'setTeam',
        'season' => 'setSeason',
        'week' => 'setWeek',
        'scoring_type' => 'setScoringType',
        'length' => 'setLength',
        'scoring_detail_id' => 'setScoringDetailId',
        'player_game_id' => 'setPlayerGameId',
        'score_id' => 'setScoreId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'game_key' => 'getGameKey',
        'season_type' => 'getSeasonType',
        'player_id' => 'getPlayerId',
        'team' => 'getTeam',
        'season' => 'getSeason',
        'week' => 'getWeek',
        'scoring_type' => 'getScoringType',
        'length' => 'getLength',
        'scoring_detail_id' => 'getScoringDetailId',
        'player_game_id' => 'getPlayerGameId',
        'score_id' => 'getScoreId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['game_key'] = isset($data['game_key']) ? $data['game_key'] : null;
        $this->container['season_type'] = isset($data['season_type']) ? $data['season_type'] : null;
        $this->container['player_id'] = isset($data['player_id']) ? $data['player_id'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['season'] = isset($data['season']) ? $data['season'] : null;
        $this->container['week'] = isset($data['week']) ? $data['week'] : null;
        $this->container['scoring_type'] = isset($data['scoring_type']) ? $data['scoring_type'] : null;
        $this->container['length'] = isset($data['length']) ? $data['length'] : null;
        $this->container['scoring_detail_id'] = isset($data['scoring_detail_id']) ? $data['scoring_detail_id'] : null;
        $this->container['player_game_id'] = isset($data['player_game_id']) ? $data['player_game_id'] : null;
        $this->container['score_id'] = isset($data['score_id']) ? $data['score_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets game_key
     *
     * @return string
     */
    public function getGameKey()
    {
        return $this->container['game_key'];
    }

    /**
     * Sets game_key
     *
     * @param string $game_key game_key
     *
     * @return $this
     */
    public function setGameKey($game_key)
    {
        $this->container['game_key'] = $game_key;

        return $this;
    }

    /**
     * Gets season_type
     *
     * @return int
     */
    public function getSeasonType()
    {
        return $this->container['season_type'];
    }

    /**
     * Sets season_type
     *
     * @param int $season_type season_type
     *
     * @return $this
     */
    public function setSeasonType($season_type)
    {
        $this->container['season_type'] = $season_type;

        return $this;
    }

    /**
     * Gets player_id
     *
     * @return int
     */
    public function getPlayerId()
    {
        return $this->container['player_id'];
    }

    /**
     * Sets player_id
     *
     * @param int $player_id player_id
     *
     * @return $this
     */
    public function setPlayerId($player_id)
    {
        $this->container['player_id'] = $player_id;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets season
     *
     * @return int
     */
    public function getSeason()
    {
        return $this->container['season'];
    }

    /**
     * Sets season
     *
     * @param int $season season
     *
     * @return $this
     */
    public function setSeason($season)
    {
        $this->container['season'] = $season;

        return $this;
    }

    /**
     * Gets week
     *
     * @return int
     */
    public function getWeek()
    {
        return $this->container['week'];
    }

    /**
     * Sets week
     *
     * @param int $week week
     *
     * @return $this
     */
    public function setWeek($week)
    {
        $this->container['week'] = $week;

        return $this;
    }

    /**
     * Gets scoring_type
     *
     * @return string
     */
    public function getScoringType()
    {
        return $this->container['scoring_type'];
    }

    /**
     * Sets scoring_type
     *
     * @param string $scoring_type scoring_type
     *
     * @return $this
     */
    public function setScoringType($scoring_type)
    {
        $this->container['scoring_type'] = $scoring_type;

        return $this;
    }

    /**
     * Gets length
     *
     * @return int
     */
    public function getLength()
    {
        return $this->container['length'];
    }

    /**
     * Sets length
     *
     * @param int $length length
     *
     * @return $this
     */
    public function setLength($length)
    {
        $this->container['length'] = $length;

        return $this;
    }

    /**
     * Gets scoring_detail_id
     *
     * @return int
     */
    public function getScoringDetailId()
    {
        return $this->container['scoring_detail_id'];
    }

    /**
     * Sets scoring_detail_id
     *
     * @param int $scoring_detail_id scoring_detail_id
     *
     * @return $this
     */
    public function setScoringDetailId($scoring_detail_id)
    {
        $this->container['scoring_detail_id'] = $scoring_detail_id;

        return $this;
    }

    /**
     * Gets player_game_id
     *
     * @return int
     */
    public function getPlayerGameId()
    {
        return $this->container['player_game_id'];
    }

    /**
     * Sets player_game_id
     *
     * @param int $player_game_id player_game_id
     *
     * @return $this
     */
    public function setPlayerGameId($player_game_id)
    {
        $this->container['player_game_id'] = $player_game_id;

        return $this;
    }

    /**
     * Gets score_id
     *
     * @return int
     */
    public function getScoreId()
    {
        return $this->container['score_id'];
    }

    /**
     * Sets score_id
     *
     * @param int $score_id score_id
     *
     * @return $this
     */
    public function setScoreId($score_id)
    {
        $this->container['score_id'] = $score_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

