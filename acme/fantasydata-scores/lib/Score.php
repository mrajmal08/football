<?php
/**
 * Score
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acme\FantasyDataScores
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NFL v3 Scores
 *
 * NFL schedules, scores, odds, weather, and news API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acme\FantasyDataScores;

use \ArrayAccess;
use \Acme\FantasyDataScores\ObjectSerializer;

/**
 * Score Class Doc Comment
 *
 * @category Class
 * @package     Acme\FantasyDataScores
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Score implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Score';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'game_key' => 'string',
        'season_type' => 'int',
        'season' => 'int',
        'week' => 'int',
        'date' => 'string',
        'away_team' => 'string',
        'home_team' => 'string',
        'away_score' => 'int',
        'home_score' => 'int',
        'channel' => 'string',
        'point_spread' => 'float',
        'over_under' => 'float',
        'quarter' => 'string',
        'time_remaining' => 'string',
        'possession' => 'string',
        'down' => 'int',
        'distance' => 'string',
        'yard_line' => 'int',
        'yard_line_territory' => 'string',
        'red_zone' => 'string',
        'away_score_quarter1' => 'int',
        'away_score_quarter2' => 'int',
        'away_score_quarter3' => 'int',
        'away_score_quarter4' => 'int',
        'away_score_overtime' => 'int',
        'home_score_quarter1' => 'int',
        'home_score_quarter2' => 'int',
        'home_score_quarter3' => 'int',
        'home_score_quarter4' => 'int',
        'home_score_overtime' => 'int',
        'has_started' => 'bool',
        'is_in_progress' => 'bool',
        'is_over' => 'bool',
        'has1st_quarter_started' => 'bool',
        'has2nd_quarter_started' => 'bool',
        'has3rd_quarter_started' => 'bool',
        'has4th_quarter_started' => 'bool',
        'is_overtime' => 'bool',
        'down_and_distance' => 'string',
        'quarter_description' => 'string',
        'stadium_id' => 'int',
        'last_updated' => 'string',
        'geo_lat' => 'float',
        'geo_long' => 'float',
        'forecast_temp_low' => 'int',
        'forecast_temp_high' => 'int',
        'forecast_description' => 'string',
        'forecast_wind_chill' => 'int',
        'forecast_wind_speed' => 'int',
        'away_team_money_line' => 'int',
        'home_team_money_line' => 'int',
        'canceled' => 'bool',
        'closed' => 'bool',
        'last_play' => 'string',
        'day' => 'string',
        'date_time' => 'string',
        'away_team_id' => 'int',
        'home_team_id' => 'int',
        'global_game_id' => 'int',
        'global_away_team_id' => 'int',
        'global_home_team_id' => 'int',
        'point_spread_away_team_money_line' => 'int',
        'point_spread_home_team_money_line' => 'int',
        'score_id' => 'int',
        'stadium_details' => '\Acme\FantasyDataScores\\Stadium'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'game_key' => null,
        'season_type' => null,
        'season' => null,
        'week' => null,
        'date' => null,
        'away_team' => null,
        'home_team' => null,
        'away_score' => null,
        'home_score' => null,
        'channel' => null,
        'point_spread' => null,
        'over_under' => null,
        'quarter' => null,
        'time_remaining' => null,
        'possession' => null,
        'down' => null,
        'distance' => null,
        'yard_line' => null,
        'yard_line_territory' => null,
        'red_zone' => null,
        'away_score_quarter1' => null,
        'away_score_quarter2' => null,
        'away_score_quarter3' => null,
        'away_score_quarter4' => null,
        'away_score_overtime' => null,
        'home_score_quarter1' => null,
        'home_score_quarter2' => null,
        'home_score_quarter3' => null,
        'home_score_quarter4' => null,
        'home_score_overtime' => null,
        'has_started' => null,
        'is_in_progress' => null,
        'is_over' => null,
        'has1st_quarter_started' => null,
        'has2nd_quarter_started' => null,
        'has3rd_quarter_started' => null,
        'has4th_quarter_started' => null,
        'is_overtime' => null,
        'down_and_distance' => null,
        'quarter_description' => null,
        'stadium_id' => null,
        'last_updated' => null,
        'geo_lat' => null,
        'geo_long' => null,
        'forecast_temp_low' => null,
        'forecast_temp_high' => null,
        'forecast_description' => null,
        'forecast_wind_chill' => null,
        'forecast_wind_speed' => null,
        'away_team_money_line' => null,
        'home_team_money_line' => null,
        'canceled' => null,
        'closed' => null,
        'last_play' => null,
        'day' => null,
        'date_time' => null,
        'away_team_id' => null,
        'home_team_id' => null,
        'global_game_id' => null,
        'global_away_team_id' => null,
        'global_home_team_id' => null,
        'point_spread_away_team_money_line' => null,
        'point_spread_home_team_money_line' => null,
        'score_id' => null,
        'stadium_details' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'game_key' => 'GameKey',
        'season_type' => 'SeasonType',
        'season' => 'Season',
        'week' => 'Week',
        'date' => 'Date',
        'away_team' => 'AwayTeam',
        'home_team' => 'HomeTeam',
        'away_score' => 'AwayScore',
        'home_score' => 'HomeScore',
        'channel' => 'Channel',
        'point_spread' => 'PointSpread',
        'over_under' => 'OverUnder',
        'quarter' => 'Quarter',
        'time_remaining' => 'TimeRemaining',
        'possession' => 'Possession',
        'down' => 'Down',
        'distance' => 'Distance',
        'yard_line' => 'YardLine',
        'yard_line_territory' => 'YardLineTerritory',
        'red_zone' => 'RedZone',
        'away_score_quarter1' => 'AwayScoreQuarter1',
        'away_score_quarter2' => 'AwayScoreQuarter2',
        'away_score_quarter3' => 'AwayScoreQuarter3',
        'away_score_quarter4' => 'AwayScoreQuarter4',
        'away_score_overtime' => 'AwayScoreOvertime',
        'home_score_quarter1' => 'HomeScoreQuarter1',
        'home_score_quarter2' => 'HomeScoreQuarter2',
        'home_score_quarter3' => 'HomeScoreQuarter3',
        'home_score_quarter4' => 'HomeScoreQuarter4',
        'home_score_overtime' => 'HomeScoreOvertime',
        'has_started' => 'HasStarted',
        'is_in_progress' => 'IsInProgress',
        'is_over' => 'IsOver',
        'has1st_quarter_started' => 'Has1stQuarterStarted',
        'has2nd_quarter_started' => 'Has2ndQuarterStarted',
        'has3rd_quarter_started' => 'Has3rdQuarterStarted',
        'has4th_quarter_started' => 'Has4thQuarterStarted',
        'is_overtime' => 'IsOvertime',
        'down_and_distance' => 'DownAndDistance',
        'quarter_description' => 'QuarterDescription',
        'stadium_id' => 'StadiumID',
        'last_updated' => 'LastUpdated',
        'geo_lat' => 'GeoLat',
        'geo_long' => 'GeoLong',
        'forecast_temp_low' => 'ForecastTempLow',
        'forecast_temp_high' => 'ForecastTempHigh',
        'forecast_description' => 'ForecastDescription',
        'forecast_wind_chill' => 'ForecastWindChill',
        'forecast_wind_speed' => 'ForecastWindSpeed',
        'away_team_money_line' => 'AwayTeamMoneyLine',
        'home_team_money_line' => 'HomeTeamMoneyLine',
        'canceled' => 'Canceled',
        'closed' => 'Closed',
        'last_play' => 'LastPlay',
        'day' => 'Day',
        'date_time' => 'DateTime',
        'away_team_id' => 'AwayTeamID',
        'home_team_id' => 'HomeTeamID',
        'global_game_id' => 'GlobalGameID',
        'global_away_team_id' => 'GlobalAwayTeamID',
        'global_home_team_id' => 'GlobalHomeTeamID',
        'point_spread_away_team_money_line' => 'PointSpreadAwayTeamMoneyLine',
        'point_spread_home_team_money_line' => 'PointSpreadHomeTeamMoneyLine',
        'score_id' => 'ScoreID',
        'stadium_details' => 'StadiumDetails'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'game_key' => 'setGameKey',
        'season_type' => 'setSeasonType',
        'season' => 'setSeason',
        'week' => 'setWeek',
        'date' => 'setDate',
        'away_team' => 'setAwayTeam',
        'home_team' => 'setHomeTeam',
        'away_score' => 'setAwayScore',
        'home_score' => 'setHomeScore',
        'channel' => 'setChannel',
        'point_spread' => 'setPointSpread',
        'over_under' => 'setOverUnder',
        'quarter' => 'setQuarter',
        'time_remaining' => 'setTimeRemaining',
        'possession' => 'setPossession',
        'down' => 'setDown',
        'distance' => 'setDistance',
        'yard_line' => 'setYardLine',
        'yard_line_territory' => 'setYardLineTerritory',
        'red_zone' => 'setRedZone',
        'away_score_quarter1' => 'setAwayScoreQuarter1',
        'away_score_quarter2' => 'setAwayScoreQuarter2',
        'away_score_quarter3' => 'setAwayScoreQuarter3',
        'away_score_quarter4' => 'setAwayScoreQuarter4',
        'away_score_overtime' => 'setAwayScoreOvertime',
        'home_score_quarter1' => 'setHomeScoreQuarter1',
        'home_score_quarter2' => 'setHomeScoreQuarter2',
        'home_score_quarter3' => 'setHomeScoreQuarter3',
        'home_score_quarter4' => 'setHomeScoreQuarter4',
        'home_score_overtime' => 'setHomeScoreOvertime',
        'has_started' => 'setHasStarted',
        'is_in_progress' => 'setIsInProgress',
        'is_over' => 'setIsOver',
        'has1st_quarter_started' => 'setHas1stQuarterStarted',
        'has2nd_quarter_started' => 'setHas2ndQuarterStarted',
        'has3rd_quarter_started' => 'setHas3rdQuarterStarted',
        'has4th_quarter_started' => 'setHas4thQuarterStarted',
        'is_overtime' => 'setIsOvertime',
        'down_and_distance' => 'setDownAndDistance',
        'quarter_description' => 'setQuarterDescription',
        'stadium_id' => 'setStadiumId',
        'last_updated' => 'setLastUpdated',
        'geo_lat' => 'setGeoLat',
        'geo_long' => 'setGeoLong',
        'forecast_temp_low' => 'setForecastTempLow',
        'forecast_temp_high' => 'setForecastTempHigh',
        'forecast_description' => 'setForecastDescription',
        'forecast_wind_chill' => 'setForecastWindChill',
        'forecast_wind_speed' => 'setForecastWindSpeed',
        'away_team_money_line' => 'setAwayTeamMoneyLine',
        'home_team_money_line' => 'setHomeTeamMoneyLine',
        'canceled' => 'setCanceled',
        'closed' => 'setClosed',
        'last_play' => 'setLastPlay',
        'day' => 'setDay',
        'date_time' => 'setDateTime',
        'away_team_id' => 'setAwayTeamId',
        'home_team_id' => 'setHomeTeamId',
        'global_game_id' => 'setGlobalGameId',
        'global_away_team_id' => 'setGlobalAwayTeamId',
        'global_home_team_id' => 'setGlobalHomeTeamId',
        'point_spread_away_team_money_line' => 'setPointSpreadAwayTeamMoneyLine',
        'point_spread_home_team_money_line' => 'setPointSpreadHomeTeamMoneyLine',
        'score_id' => 'setScoreId',
        'stadium_details' => 'setStadiumDetails'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'game_key' => 'getGameKey',
        'season_type' => 'getSeasonType',
        'season' => 'getSeason',
        'week' => 'getWeek',
        'date' => 'getDate',
        'away_team' => 'getAwayTeam',
        'home_team' => 'getHomeTeam',
        'away_score' => 'getAwayScore',
        'home_score' => 'getHomeScore',
        'channel' => 'getChannel',
        'point_spread' => 'getPointSpread',
        'over_under' => 'getOverUnder',
        'quarter' => 'getQuarter',
        'time_remaining' => 'getTimeRemaining',
        'possession' => 'getPossession',
        'down' => 'getDown',
        'distance' => 'getDistance',
        'yard_line' => 'getYardLine',
        'yard_line_territory' => 'getYardLineTerritory',
        'red_zone' => 'getRedZone',
        'away_score_quarter1' => 'getAwayScoreQuarter1',
        'away_score_quarter2' => 'getAwayScoreQuarter2',
        'away_score_quarter3' => 'getAwayScoreQuarter3',
        'away_score_quarter4' => 'getAwayScoreQuarter4',
        'away_score_overtime' => 'getAwayScoreOvertime',
        'home_score_quarter1' => 'getHomeScoreQuarter1',
        'home_score_quarter2' => 'getHomeScoreQuarter2',
        'home_score_quarter3' => 'getHomeScoreQuarter3',
        'home_score_quarter4' => 'getHomeScoreQuarter4',
        'home_score_overtime' => 'getHomeScoreOvertime',
        'has_started' => 'getHasStarted',
        'is_in_progress' => 'getIsInProgress',
        'is_over' => 'getIsOver',
        'has1st_quarter_started' => 'getHas1stQuarterStarted',
        'has2nd_quarter_started' => 'getHas2ndQuarterStarted',
        'has3rd_quarter_started' => 'getHas3rdQuarterStarted',
        'has4th_quarter_started' => 'getHas4thQuarterStarted',
        'is_overtime' => 'getIsOvertime',
        'down_and_distance' => 'getDownAndDistance',
        'quarter_description' => 'getQuarterDescription',
        'stadium_id' => 'getStadiumId',
        'last_updated' => 'getLastUpdated',
        'geo_lat' => 'getGeoLat',
        'geo_long' => 'getGeoLong',
        'forecast_temp_low' => 'getForecastTempLow',
        'forecast_temp_high' => 'getForecastTempHigh',
        'forecast_description' => 'getForecastDescription',
        'forecast_wind_chill' => 'getForecastWindChill',
        'forecast_wind_speed' => 'getForecastWindSpeed',
        'away_team_money_line' => 'getAwayTeamMoneyLine',
        'home_team_money_line' => 'getHomeTeamMoneyLine',
        'canceled' => 'getCanceled',
        'closed' => 'getClosed',
        'last_play' => 'getLastPlay',
        'day' => 'getDay',
        'date_time' => 'getDateTime',
        'away_team_id' => 'getAwayTeamId',
        'home_team_id' => 'getHomeTeamId',
        'global_game_id' => 'getGlobalGameId',
        'global_away_team_id' => 'getGlobalAwayTeamId',
        'global_home_team_id' => 'getGlobalHomeTeamId',
        'point_spread_away_team_money_line' => 'getPointSpreadAwayTeamMoneyLine',
        'point_spread_home_team_money_line' => 'getPointSpreadHomeTeamMoneyLine',
        'score_id' => 'getScoreId',
        'stadium_details' => 'getStadiumDetails'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['game_key'] = isset($data['game_key']) ? $data['game_key'] : null;
        $this->container['season_type'] = isset($data['season_type']) ? $data['season_type'] : null;
        $this->container['season'] = isset($data['season']) ? $data['season'] : null;
        $this->container['week'] = isset($data['week']) ? $data['week'] : null;
        $this->container['date'] = isset($data['date']) ? $data['date'] : null;
        $this->container['away_team'] = isset($data['away_team']) ? $data['away_team'] : null;
        $this->container['home_team'] = isset($data['home_team']) ? $data['home_team'] : null;
        $this->container['away_score'] = isset($data['away_score']) ? $data['away_score'] : null;
        $this->container['home_score'] = isset($data['home_score']) ? $data['home_score'] : null;
        $this->container['channel'] = isset($data['channel']) ? $data['channel'] : null;
        $this->container['point_spread'] = isset($data['point_spread']) ? $data['point_spread'] : null;
        $this->container['over_under'] = isset($data['over_under']) ? $data['over_under'] : null;
        $this->container['quarter'] = isset($data['quarter']) ? $data['quarter'] : null;
        $this->container['time_remaining'] = isset($data['time_remaining']) ? $data['time_remaining'] : null;
        $this->container['possession'] = isset($data['possession']) ? $data['possession'] : null;
        $this->container['down'] = isset($data['down']) ? $data['down'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['yard_line'] = isset($data['yard_line']) ? $data['yard_line'] : null;
        $this->container['yard_line_territory'] = isset($data['yard_line_territory']) ? $data['yard_line_territory'] : null;
        $this->container['red_zone'] = isset($data['red_zone']) ? $data['red_zone'] : null;
        $this->container['away_score_quarter1'] = isset($data['away_score_quarter1']) ? $data['away_score_quarter1'] : null;
        $this->container['away_score_quarter2'] = isset($data['away_score_quarter2']) ? $data['away_score_quarter2'] : null;
        $this->container['away_score_quarter3'] = isset($data['away_score_quarter3']) ? $data['away_score_quarter3'] : null;
        $this->container['away_score_quarter4'] = isset($data['away_score_quarter4']) ? $data['away_score_quarter4'] : null;
        $this->container['away_score_overtime'] = isset($data['away_score_overtime']) ? $data['away_score_overtime'] : null;
        $this->container['home_score_quarter1'] = isset($data['home_score_quarter1']) ? $data['home_score_quarter1'] : null;
        $this->container['home_score_quarter2'] = isset($data['home_score_quarter2']) ? $data['home_score_quarter2'] : null;
        $this->container['home_score_quarter3'] = isset($data['home_score_quarter3']) ? $data['home_score_quarter3'] : null;
        $this->container['home_score_quarter4'] = isset($data['home_score_quarter4']) ? $data['home_score_quarter4'] : null;
        $this->container['home_score_overtime'] = isset($data['home_score_overtime']) ? $data['home_score_overtime'] : null;
        $this->container['has_started'] = isset($data['has_started']) ? $data['has_started'] : null;
        $this->container['is_in_progress'] = isset($data['is_in_progress']) ? $data['is_in_progress'] : null;
        $this->container['is_over'] = isset($data['is_over']) ? $data['is_over'] : null;
        $this->container['has1st_quarter_started'] = isset($data['has1st_quarter_started']) ? $data['has1st_quarter_started'] : null;
        $this->container['has2nd_quarter_started'] = isset($data['has2nd_quarter_started']) ? $data['has2nd_quarter_started'] : null;
        $this->container['has3rd_quarter_started'] = isset($data['has3rd_quarter_started']) ? $data['has3rd_quarter_started'] : null;
        $this->container['has4th_quarter_started'] = isset($data['has4th_quarter_started']) ? $data['has4th_quarter_started'] : null;
        $this->container['is_overtime'] = isset($data['is_overtime']) ? $data['is_overtime'] : null;
        $this->container['down_and_distance'] = isset($data['down_and_distance']) ? $data['down_and_distance'] : null;
        $this->container['quarter_description'] = isset($data['quarter_description']) ? $data['quarter_description'] : null;
        $this->container['stadium_id'] = isset($data['stadium_id']) ? $data['stadium_id'] : null;
        $this->container['last_updated'] = isset($data['last_updated']) ? $data['last_updated'] : null;
        $this->container['geo_lat'] = isset($data['geo_lat']) ? $data['geo_lat'] : null;
        $this->container['geo_long'] = isset($data['geo_long']) ? $data['geo_long'] : null;
        $this->container['forecast_temp_low'] = isset($data['forecast_temp_low']) ? $data['forecast_temp_low'] : null;
        $this->container['forecast_temp_high'] = isset($data['forecast_temp_high']) ? $data['forecast_temp_high'] : null;
        $this->container['forecast_description'] = isset($data['forecast_description']) ? $data['forecast_description'] : null;
        $this->container['forecast_wind_chill'] = isset($data['forecast_wind_chill']) ? $data['forecast_wind_chill'] : null;
        $this->container['forecast_wind_speed'] = isset($data['forecast_wind_speed']) ? $data['forecast_wind_speed'] : null;
        $this->container['away_team_money_line'] = isset($data['away_team_money_line']) ? $data['away_team_money_line'] : null;
        $this->container['home_team_money_line'] = isset($data['home_team_money_line']) ? $data['home_team_money_line'] : null;
        $this->container['canceled'] = isset($data['canceled']) ? $data['canceled'] : null;
        $this->container['closed'] = isset($data['closed']) ? $data['closed'] : null;
        $this->container['last_play'] = isset($data['last_play']) ? $data['last_play'] : null;
        $this->container['day'] = isset($data['day']) ? $data['day'] : null;
        $this->container['date_time'] = isset($data['date_time']) ? $data['date_time'] : null;
        $this->container['away_team_id'] = isset($data['away_team_id']) ? $data['away_team_id'] : null;
        $this->container['home_team_id'] = isset($data['home_team_id']) ? $data['home_team_id'] : null;
        $this->container['global_game_id'] = isset($data['global_game_id']) ? $data['global_game_id'] : null;
        $this->container['global_away_team_id'] = isset($data['global_away_team_id']) ? $data['global_away_team_id'] : null;
        $this->container['global_home_team_id'] = isset($data['global_home_team_id']) ? $data['global_home_team_id'] : null;
        $this->container['point_spread_away_team_money_line'] = isset($data['point_spread_away_team_money_line']) ? $data['point_spread_away_team_money_line'] : null;
        $this->container['point_spread_home_team_money_line'] = isset($data['point_spread_home_team_money_line']) ? $data['point_spread_home_team_money_line'] : null;
        $this->container['score_id'] = isset($data['score_id']) ? $data['score_id'] : null;
        $this->container['stadium_details'] = isset($data['stadium_details']) ? $data['stadium_details'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets game_key
     *
     * @return string
     */
    public function getGameKey()
    {
        return $this->container['game_key'];
    }

    /**
     * Sets game_key
     *
     * @param string $game_key game_key
     *
     * @return $this
     */
    public function setGameKey($game_key)
    {
        $this->container['game_key'] = $game_key;

        return $this;
    }

    /**
     * Gets season_type
     *
     * @return int
     */
    public function getSeasonType()
    {
        return $this->container['season_type'];
    }

    /**
     * Sets season_type
     *
     * @param int $season_type season_type
     *
     * @return $this
     */
    public function setSeasonType($season_type)
    {
        $this->container['season_type'] = $season_type;

        return $this;
    }

    /**
     * Gets season
     *
     * @return int
     */
    public function getSeason()
    {
        return $this->container['season'];
    }

    /**
     * Sets season
     *
     * @param int $season season
     *
     * @return $this
     */
    public function setSeason($season)
    {
        $this->container['season'] = $season;

        return $this;
    }

    /**
     * Gets week
     *
     * @return int
     */
    public function getWeek()
    {
        return $this->container['week'];
    }

    /**
     * Sets week
     *
     * @param int $week week
     *
     * @return $this
     */
    public function setWeek($week)
    {
        $this->container['week'] = $week;

        return $this;
    }

    /**
     * Gets date
     *
     * @return string
     */
    public function getDate()
    {
        return $this->container['date'];
    }

    /**
     * Sets date
     *
     * @param string $date date
     *
     * @return $this
     */
    public function setDate($date)
    {
        $this->container['date'] = $date;

        return $this;
    }

    /**
     * Gets away_team
     *
     * @return string
     */
    public function getAwayTeam()
    {
        return $this->container['away_team'];
    }

    /**
     * Sets away_team
     *
     * @param string $away_team away_team
     *
     * @return $this
     */
    public function setAwayTeam($away_team)
    {
        $this->container['away_team'] = $away_team;

        return $this;
    }

    /**
     * Gets home_team
     *
     * @return string
     */
    public function getHomeTeam()
    {
        return $this->container['home_team'];
    }

    /**
     * Sets home_team
     *
     * @param string $home_team home_team
     *
     * @return $this
     */
    public function setHomeTeam($home_team)
    {
        $this->container['home_team'] = $home_team;

        return $this;
    }

    /**
     * Gets away_score
     *
     * @return int
     */
    public function getAwayScore()
    {
        return $this->container['away_score'];
    }

    /**
     * Sets away_score
     *
     * @param int $away_score away_score
     *
     * @return $this
     */
    public function setAwayScore($away_score)
    {
        $this->container['away_score'] = $away_score;

        return $this;
    }

    /**
     * Gets home_score
     *
     * @return int
     */
    public function getHomeScore()
    {
        return $this->container['home_score'];
    }

    /**
     * Sets home_score
     *
     * @param int $home_score home_score
     *
     * @return $this
     */
    public function setHomeScore($home_score)
    {
        $this->container['home_score'] = $home_score;

        return $this;
    }

    /**
     * Gets channel
     *
     * @return string
     */
    public function getChannel()
    {
        return $this->container['channel'];
    }

    /**
     * Sets channel
     *
     * @param string $channel channel
     *
     * @return $this
     */
    public function setChannel($channel)
    {
        $this->container['channel'] = $channel;

        return $this;
    }

    /**
     * Gets point_spread
     *
     * @return float
     */
    public function getPointSpread()
    {
        return $this->container['point_spread'];
    }

    /**
     * Sets point_spread
     *
     * @param float $point_spread point_spread
     *
     * @return $this
     */
    public function setPointSpread($point_spread)
    {
        $this->container['point_spread'] = $point_spread;

        return $this;
    }

    /**
     * Gets over_under
     *
     * @return float
     */
    public function getOverUnder()
    {
        return $this->container['over_under'];
    }

    /**
     * Sets over_under
     *
     * @param float $over_under over_under
     *
     * @return $this
     */
    public function setOverUnder($over_under)
    {
        $this->container['over_under'] = $over_under;

        return $this;
    }

    /**
     * Gets quarter
     *
     * @return string
     */
    public function getQuarter()
    {
        return $this->container['quarter'];
    }

    /**
     * Sets quarter
     *
     * @param string $quarter quarter
     *
     * @return $this
     */
    public function setQuarter($quarter)
    {
        $this->container['quarter'] = $quarter;

        return $this;
    }

    /**
     * Gets time_remaining
     *
     * @return string
     */
    public function getTimeRemaining()
    {
        return $this->container['time_remaining'];
    }

    /**
     * Sets time_remaining
     *
     * @param string $time_remaining time_remaining
     *
     * @return $this
     */
    public function setTimeRemaining($time_remaining)
    {
        $this->container['time_remaining'] = $time_remaining;

        return $this;
    }

    /**
     * Gets possession
     *
     * @return string
     */
    public function getPossession()
    {
        return $this->container['possession'];
    }

    /**
     * Sets possession
     *
     * @param string $possession possession
     *
     * @return $this
     */
    public function setPossession($possession)
    {
        $this->container['possession'] = $possession;

        return $this;
    }

    /**
     * Gets down
     *
     * @return int
     */
    public function getDown()
    {
        return $this->container['down'];
    }

    /**
     * Sets down
     *
     * @param int $down down
     *
     * @return $this
     */
    public function setDown($down)
    {
        $this->container['down'] = $down;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return string
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param string $distance distance
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets yard_line
     *
     * @return int
     */
    public function getYardLine()
    {
        return $this->container['yard_line'];
    }

    /**
     * Sets yard_line
     *
     * @param int $yard_line yard_line
     *
     * @return $this
     */
    public function setYardLine($yard_line)
    {
        $this->container['yard_line'] = $yard_line;

        return $this;
    }

    /**
     * Gets yard_line_territory
     *
     * @return string
     */
    public function getYardLineTerritory()
    {
        return $this->container['yard_line_territory'];
    }

    /**
     * Sets yard_line_territory
     *
     * @param string $yard_line_territory yard_line_territory
     *
     * @return $this
     */
    public function setYardLineTerritory($yard_line_territory)
    {
        $this->container['yard_line_territory'] = $yard_line_territory;

        return $this;
    }

    /**
     * Gets red_zone
     *
     * @return string
     */
    public function getRedZone()
    {
        return $this->container['red_zone'];
    }

    /**
     * Sets red_zone
     *
     * @param string $red_zone red_zone
     *
     * @return $this
     */
    public function setRedZone($red_zone)
    {
        $this->container['red_zone'] = $red_zone;

        return $this;
    }

    /**
     * Gets away_score_quarter1
     *
     * @return int
     */
    public function getAwayScoreQuarter1()
    {
        return $this->container['away_score_quarter1'];
    }

    /**
     * Sets away_score_quarter1
     *
     * @param int $away_score_quarter1 away_score_quarter1
     *
     * @return $this
     */
    public function setAwayScoreQuarter1($away_score_quarter1)
    {
        $this->container['away_score_quarter1'] = $away_score_quarter1;

        return $this;
    }

    /**
     * Gets away_score_quarter2
     *
     * @return int
     */
    public function getAwayScoreQuarter2()
    {
        return $this->container['away_score_quarter2'];
    }

    /**
     * Sets away_score_quarter2
     *
     * @param int $away_score_quarter2 away_score_quarter2
     *
     * @return $this
     */
    public function setAwayScoreQuarter2($away_score_quarter2)
    {
        $this->container['away_score_quarter2'] = $away_score_quarter2;

        return $this;
    }

    /**
     * Gets away_score_quarter3
     *
     * @return int
     */
    public function getAwayScoreQuarter3()
    {
        return $this->container['away_score_quarter3'];
    }

    /**
     * Sets away_score_quarter3
     *
     * @param int $away_score_quarter3 away_score_quarter3
     *
     * @return $this
     */
    public function setAwayScoreQuarter3($away_score_quarter3)
    {
        $this->container['away_score_quarter3'] = $away_score_quarter3;

        return $this;
    }

    /**
     * Gets away_score_quarter4
     *
     * @return int
     */
    public function getAwayScoreQuarter4()
    {
        return $this->container['away_score_quarter4'];
    }

    /**
     * Sets away_score_quarter4
     *
     * @param int $away_score_quarter4 away_score_quarter4
     *
     * @return $this
     */
    public function setAwayScoreQuarter4($away_score_quarter4)
    {
        $this->container['away_score_quarter4'] = $away_score_quarter4;

        return $this;
    }

    /**
     * Gets away_score_overtime
     *
     * @return int
     */
    public function getAwayScoreOvertime()
    {
        return $this->container['away_score_overtime'];
    }

    /**
     * Sets away_score_overtime
     *
     * @param int $away_score_overtime away_score_overtime
     *
     * @return $this
     */
    public function setAwayScoreOvertime($away_score_overtime)
    {
        $this->container['away_score_overtime'] = $away_score_overtime;

        return $this;
    }

    /**
     * Gets home_score_quarter1
     *
     * @return int
     */
    public function getHomeScoreQuarter1()
    {
        return $this->container['home_score_quarter1'];
    }

    /**
     * Sets home_score_quarter1
     *
     * @param int $home_score_quarter1 home_score_quarter1
     *
     * @return $this
     */
    public function setHomeScoreQuarter1($home_score_quarter1)
    {
        $this->container['home_score_quarter1'] = $home_score_quarter1;

        return $this;
    }

    /**
     * Gets home_score_quarter2
     *
     * @return int
     */
    public function getHomeScoreQuarter2()
    {
        return $this->container['home_score_quarter2'];
    }

    /**
     * Sets home_score_quarter2
     *
     * @param int $home_score_quarter2 home_score_quarter2
     *
     * @return $this
     */
    public function setHomeScoreQuarter2($home_score_quarter2)
    {
        $this->container['home_score_quarter2'] = $home_score_quarter2;

        return $this;
    }

    /**
     * Gets home_score_quarter3
     *
     * @return int
     */
    public function getHomeScoreQuarter3()
    {
        return $this->container['home_score_quarter3'];
    }

    /**
     * Sets home_score_quarter3
     *
     * @param int $home_score_quarter3 home_score_quarter3
     *
     * @return $this
     */
    public function setHomeScoreQuarter3($home_score_quarter3)
    {
        $this->container['home_score_quarter3'] = $home_score_quarter3;

        return $this;
    }

    /**
     * Gets home_score_quarter4
     *
     * @return int
     */
    public function getHomeScoreQuarter4()
    {
        return $this->container['home_score_quarter4'];
    }

    /**
     * Sets home_score_quarter4
     *
     * @param int $home_score_quarter4 home_score_quarter4
     *
     * @return $this
     */
    public function setHomeScoreQuarter4($home_score_quarter4)
    {
        $this->container['home_score_quarter4'] = $home_score_quarter4;

        return $this;
    }

    /**
     * Gets home_score_overtime
     *
     * @return int
     */
    public function getHomeScoreOvertime()
    {
        return $this->container['home_score_overtime'];
    }

    /**
     * Sets home_score_overtime
     *
     * @param int $home_score_overtime home_score_overtime
     *
     * @return $this
     */
    public function setHomeScoreOvertime($home_score_overtime)
    {
        $this->container['home_score_overtime'] = $home_score_overtime;

        return $this;
    }

    /**
     * Gets has_started
     *
     * @return bool
     */
    public function getHasStarted()
    {
        return $this->container['has_started'];
    }

    /**
     * Sets has_started
     *
     * @param bool $has_started has_started
     *
     * @return $this
     */
    public function setHasStarted($has_started)
    {
        $this->container['has_started'] = $has_started;

        return $this;
    }

    /**
     * Gets is_in_progress
     *
     * @return bool
     */
    public function getIsInProgress()
    {
        return $this->container['is_in_progress'];
    }

    /**
     * Sets is_in_progress
     *
     * @param bool $is_in_progress is_in_progress
     *
     * @return $this
     */
    public function setIsInProgress($is_in_progress)
    {
        $this->container['is_in_progress'] = $is_in_progress;

        return $this;
    }

    /**
     * Gets is_over
     *
     * @return bool
     */
    public function getIsOver()
    {
        return $this->container['is_over'];
    }

    /**
     * Sets is_over
     *
     * @param bool $is_over is_over
     *
     * @return $this
     */
    public function setIsOver($is_over)
    {
        $this->container['is_over'] = $is_over;

        return $this;
    }

    /**
     * Gets has1st_quarter_started
     *
     * @return bool
     */
    public function getHas1stQuarterStarted()
    {
        return $this->container['has1st_quarter_started'];
    }

    /**
     * Sets has1st_quarter_started
     *
     * @param bool $has1st_quarter_started has1st_quarter_started
     *
     * @return $this
     */
    public function setHas1stQuarterStarted($has1st_quarter_started)
    {
        $this->container['has1st_quarter_started'] = $has1st_quarter_started;

        return $this;
    }

    /**
     * Gets has2nd_quarter_started
     *
     * @return bool
     */
    public function getHas2ndQuarterStarted()
    {
        return $this->container['has2nd_quarter_started'];
    }

    /**
     * Sets has2nd_quarter_started
     *
     * @param bool $has2nd_quarter_started has2nd_quarter_started
     *
     * @return $this
     */
    public function setHas2ndQuarterStarted($has2nd_quarter_started)
    {
        $this->container['has2nd_quarter_started'] = $has2nd_quarter_started;

        return $this;
    }

    /**
     * Gets has3rd_quarter_started
     *
     * @return bool
     */
    public function getHas3rdQuarterStarted()
    {
        return $this->container['has3rd_quarter_started'];
    }

    /**
     * Sets has3rd_quarter_started
     *
     * @param bool $has3rd_quarter_started has3rd_quarter_started
     *
     * @return $this
     */
    public function setHas3rdQuarterStarted($has3rd_quarter_started)
    {
        $this->container['has3rd_quarter_started'] = $has3rd_quarter_started;

        return $this;
    }

    /**
     * Gets has4th_quarter_started
     *
     * @return bool
     */
    public function getHas4thQuarterStarted()
    {
        return $this->container['has4th_quarter_started'];
    }

    /**
     * Sets has4th_quarter_started
     *
     * @param bool $has4th_quarter_started has4th_quarter_started
     *
     * @return $this
     */
    public function setHas4thQuarterStarted($has4th_quarter_started)
    {
        $this->container['has4th_quarter_started'] = $has4th_quarter_started;

        return $this;
    }

    /**
     * Gets is_overtime
     *
     * @return bool
     */
    public function getIsOvertime()
    {
        return $this->container['is_overtime'];
    }

    /**
     * Sets is_overtime
     *
     * @param bool $is_overtime is_overtime
     *
     * @return $this
     */
    public function setIsOvertime($is_overtime)
    {
        $this->container['is_overtime'] = $is_overtime;

        return $this;
    }

    /**
     * Gets down_and_distance
     *
     * @return string
     */
    public function getDownAndDistance()
    {
        return $this->container['down_and_distance'];
    }

    /**
     * Sets down_and_distance
     *
     * @param string $down_and_distance down_and_distance
     *
     * @return $this
     */
    public function setDownAndDistance($down_and_distance)
    {
        $this->container['down_and_distance'] = $down_and_distance;

        return $this;
    }

    /**
     * Gets quarter_description
     *
     * @return string
     */
    public function getQuarterDescription()
    {
        return $this->container['quarter_description'];
    }

    /**
     * Sets quarter_description
     *
     * @param string $quarter_description quarter_description
     *
     * @return $this
     */
    public function setQuarterDescription($quarter_description)
    {
        $this->container['quarter_description'] = $quarter_description;

        return $this;
    }

    /**
     * Gets stadium_id
     *
     * @return int
     */
    public function getStadiumId()
    {
        return $this->container['stadium_id'];
    }

    /**
     * Sets stadium_id
     *
     * @param int $stadium_id stadium_id
     *
     * @return $this
     */
    public function setStadiumId($stadium_id)
    {
        $this->container['stadium_id'] = $stadium_id;

        return $this;
    }

    /**
     * Gets last_updated
     *
     * @return string
     */
    public function getLastUpdated()
    {
        return $this->container['last_updated'];
    }

    /**
     * Sets last_updated
     *
     * @param string $last_updated last_updated
     *
     * @return $this
     */
    public function setLastUpdated($last_updated)
    {
        $this->container['last_updated'] = $last_updated;

        return $this;
    }

    /**
     * Gets geo_lat
     *
     * @return float
     */
    public function getGeoLat()
    {
        return $this->container['geo_lat'];
    }

    /**
     * Sets geo_lat
     *
     * @param float $geo_lat geo_lat
     *
     * @return $this
     */
    public function setGeoLat($geo_lat)
    {
        $this->container['geo_lat'] = $geo_lat;

        return $this;
    }

    /**
     * Gets geo_long
     *
     * @return float
     */
    public function getGeoLong()
    {
        return $this->container['geo_long'];
    }

    /**
     * Sets geo_long
     *
     * @param float $geo_long geo_long
     *
     * @return $this
     */
    public function setGeoLong($geo_long)
    {
        $this->container['geo_long'] = $geo_long;

        return $this;
    }

    /**
     * Gets forecast_temp_low
     *
     * @return int
     */
    public function getForecastTempLow()
    {
        return $this->container['forecast_temp_low'];
    }

    /**
     * Sets forecast_temp_low
     *
     * @param int $forecast_temp_low forecast_temp_low
     *
     * @return $this
     */
    public function setForecastTempLow($forecast_temp_low)
    {
        $this->container['forecast_temp_low'] = $forecast_temp_low;

        return $this;
    }

    /**
     * Gets forecast_temp_high
     *
     * @return int
     */
    public function getForecastTempHigh()
    {
        return $this->container['forecast_temp_high'];
    }

    /**
     * Sets forecast_temp_high
     *
     * @param int $forecast_temp_high forecast_temp_high
     *
     * @return $this
     */
    public function setForecastTempHigh($forecast_temp_high)
    {
        $this->container['forecast_temp_high'] = $forecast_temp_high;

        return $this;
    }

    /**
     * Gets forecast_description
     *
     * @return string
     */
    public function getForecastDescription()
    {
        return $this->container['forecast_description'];
    }

    /**
     * Sets forecast_description
     *
     * @param string $forecast_description forecast_description
     *
     * @return $this
     */
    public function setForecastDescription($forecast_description)
    {
        $this->container['forecast_description'] = $forecast_description;

        return $this;
    }

    /**
     * Gets forecast_wind_chill
     *
     * @return int
     */
    public function getForecastWindChill()
    {
        return $this->container['forecast_wind_chill'];
    }

    /**
     * Sets forecast_wind_chill
     *
     * @param int $forecast_wind_chill forecast_wind_chill
     *
     * @return $this
     */
    public function setForecastWindChill($forecast_wind_chill)
    {
        $this->container['forecast_wind_chill'] = $forecast_wind_chill;

        return $this;
    }

    /**
     * Gets forecast_wind_speed
     *
     * @return int
     */
    public function getForecastWindSpeed()
    {
        return $this->container['forecast_wind_speed'];
    }

    /**
     * Sets forecast_wind_speed
     *
     * @param int $forecast_wind_speed forecast_wind_speed
     *
     * @return $this
     */
    public function setForecastWindSpeed($forecast_wind_speed)
    {
        $this->container['forecast_wind_speed'] = $forecast_wind_speed;

        return $this;
    }

    /**
     * Gets away_team_money_line
     *
     * @return int
     */
    public function getAwayTeamMoneyLine()
    {
        return $this->container['away_team_money_line'];
    }

    /**
     * Sets away_team_money_line
     *
     * @param int $away_team_money_line away_team_money_line
     *
     * @return $this
     */
    public function setAwayTeamMoneyLine($away_team_money_line)
    {
        $this->container['away_team_money_line'] = $away_team_money_line;

        return $this;
    }

    /**
     * Gets home_team_money_line
     *
     * @return int
     */
    public function getHomeTeamMoneyLine()
    {
        return $this->container['home_team_money_line'];
    }

    /**
     * Sets home_team_money_line
     *
     * @param int $home_team_money_line home_team_money_line
     *
     * @return $this
     */
    public function setHomeTeamMoneyLine($home_team_money_line)
    {
        $this->container['home_team_money_line'] = $home_team_money_line;

        return $this;
    }

    /**
     * Gets canceled
     *
     * @return bool
     */
    public function getCanceled()
    {
        return $this->container['canceled'];
    }

    /**
     * Sets canceled
     *
     * @param bool $canceled canceled
     *
     * @return $this
     */
    public function setCanceled($canceled)
    {
        $this->container['canceled'] = $canceled;

        return $this;
    }

    /**
     * Gets closed
     *
     * @return bool
     */
    public function getClosed()
    {
        return $this->container['closed'];
    }

    /**
     * Sets closed
     *
     * @param bool $closed closed
     *
     * @return $this
     */
    public function setClosed($closed)
    {
        $this->container['closed'] = $closed;

        return $this;
    }

    /**
     * Gets last_play
     *
     * @return string
     */
    public function getLastPlay()
    {
        return $this->container['last_play'];
    }

    /**
     * Sets last_play
     *
     * @param string $last_play last_play
     *
     * @return $this
     */
    public function setLastPlay($last_play)
    {
        $this->container['last_play'] = $last_play;

        return $this;
    }

    /**
     * Gets day
     *
     * @return string
     */
    public function getDay()
    {
        return $this->container['day'];
    }

    /**
     * Sets day
     *
     * @param string $day day
     *
     * @return $this
     */
    public function setDay($day)
    {
        $this->container['day'] = $day;

        return $this;
    }

    /**
     * Gets date_time
     *
     * @return string
     */
    public function getDateTime()
    {
        return $this->container['date_time'];
    }

    /**
     * Sets date_time
     *
     * @param string $date_time date_time
     *
     * @return $this
     */
    public function setDateTime($date_time)
    {
        $this->container['date_time'] = $date_time;

        return $this;
    }

    /**
     * Gets away_team_id
     *
     * @return int
     */
    public function getAwayTeamId()
    {
        return $this->container['away_team_id'];
    }

    /**
     * Sets away_team_id
     *
     * @param int $away_team_id away_team_id
     *
     * @return $this
     */
    public function setAwayTeamId($away_team_id)
    {
        $this->container['away_team_id'] = $away_team_id;

        return $this;
    }

    /**
     * Gets home_team_id
     *
     * @return int
     */
    public function getHomeTeamId()
    {
        return $this->container['home_team_id'];
    }

    /**
     * Sets home_team_id
     *
     * @param int $home_team_id home_team_id
     *
     * @return $this
     */
    public function setHomeTeamId($home_team_id)
    {
        $this->container['home_team_id'] = $home_team_id;

        return $this;
    }

    /**
     * Gets global_game_id
     *
     * @return int
     */
    public function getGlobalGameId()
    {
        return $this->container['global_game_id'];
    }

    /**
     * Sets global_game_id
     *
     * @param int $global_game_id global_game_id
     *
     * @return $this
     */
    public function setGlobalGameId($global_game_id)
    {
        $this->container['global_game_id'] = $global_game_id;

        return $this;
    }

    /**
     * Gets global_away_team_id
     *
     * @return int
     */
    public function getGlobalAwayTeamId()
    {
        return $this->container['global_away_team_id'];
    }

    /**
     * Sets global_away_team_id
     *
     * @param int $global_away_team_id global_away_team_id
     *
     * @return $this
     */
    public function setGlobalAwayTeamId($global_away_team_id)
    {
        $this->container['global_away_team_id'] = $global_away_team_id;

        return $this;
    }

    /**
     * Gets global_home_team_id
     *
     * @return int
     */
    public function getGlobalHomeTeamId()
    {
        return $this->container['global_home_team_id'];
    }

    /**
     * Sets global_home_team_id
     *
     * @param int $global_home_team_id global_home_team_id
     *
     * @return $this
     */
    public function setGlobalHomeTeamId($global_home_team_id)
    {
        $this->container['global_home_team_id'] = $global_home_team_id;

        return $this;
    }

    /**
     * Gets point_spread_away_team_money_line
     *
     * @return int
     */
    public function getPointSpreadAwayTeamMoneyLine()
    {
        return $this->container['point_spread_away_team_money_line'];
    }

    /**
     * Sets point_spread_away_team_money_line
     *
     * @param int $point_spread_away_team_money_line point_spread_away_team_money_line
     *
     * @return $this
     */
    public function setPointSpreadAwayTeamMoneyLine($point_spread_away_team_money_line)
    {
        $this->container['point_spread_away_team_money_line'] = $point_spread_away_team_money_line;

        return $this;
    }

    /**
     * Gets point_spread_home_team_money_line
     *
     * @return int
     */
    public function getPointSpreadHomeTeamMoneyLine()
    {
        return $this->container['point_spread_home_team_money_line'];
    }

    /**
     * Sets point_spread_home_team_money_line
     *
     * @param int $point_spread_home_team_money_line point_spread_home_team_money_line
     *
     * @return $this
     */
    public function setPointSpreadHomeTeamMoneyLine($point_spread_home_team_money_line)
    {
        $this->container['point_spread_home_team_money_line'] = $point_spread_home_team_money_line;

        return $this;
    }

    /**
     * Gets score_id
     *
     * @return int
     */
    public function getScoreId()
    {
        return $this->container['score_id'];
    }

    /**
     * Sets score_id
     *
     * @param int $score_id score_id
     *
     * @return $this
     */
    public function setScoreId($score_id)
    {
        $this->container['score_id'] = $score_id;

        return $this;
    }

    /**
     * Gets stadium_details
     *
     * @return \Acme\FantasyDataScores\\Stadium
     */
    public function getStadiumDetails()
    {
        return $this->container['stadium_details'];
    }

    /**
     * Sets stadium_details
     *
     * @param \Acme\FantasyDataScores\\Stadium $stadium_details stadium_details
     *
     * @return $this
     */
    public function setStadiumDetails($stadium_details)
    {
        $this->container['stadium_details'] = $stadium_details;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

