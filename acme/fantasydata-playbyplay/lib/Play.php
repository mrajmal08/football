<?php
/**
 * Play
 *
 * PHP version 5
 *
 * @category Class
 * @package  Acme\FantasyDataPlayByPlay
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * NFL v3 Play-by-Play
 *
 * NFL play-by-play API.
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Acme\FantasyDataPlayByPlay;

use \ArrayAccess;
use \Acme\FantasyDataPlayByPlay\ObjectSerializer;

/**
 * Play Class Doc Comment
 *
 * @category Class
 * @package     Acme\FantasyDataPlayByPlay
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Play implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Play';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'play_id' => 'int',
        'quarter_id' => 'int',
        'quarter_name' => 'string',
        'sequence' => 'int',
        'time_remaining_minutes' => 'int',
        'time_remaining_seconds' => 'int',
        'play_time' => 'string',
        'updated' => 'string',
        'created' => 'string',
        'team' => 'string',
        'opponent' => 'string',
        'down' => 'int',
        'distance' => 'int',
        'yard_line' => 'int',
        'yard_line_territory' => 'string',
        'yards_to_end_zone' => 'int',
        'type' => 'string',
        'yards_gained' => 'int',
        'description' => 'string',
        'is_scoring_play' => 'bool',
        'play_stats' => '\Acme\FantasyDataPlayByPlay\\PlayStat[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'play_id' => null,
        'quarter_id' => null,
        'quarter_name' => null,
        'sequence' => null,
        'time_remaining_minutes' => null,
        'time_remaining_seconds' => null,
        'play_time' => null,
        'updated' => null,
        'created' => null,
        'team' => null,
        'opponent' => null,
        'down' => null,
        'distance' => null,
        'yard_line' => null,
        'yard_line_territory' => null,
        'yards_to_end_zone' => null,
        'type' => null,
        'yards_gained' => null,
        'description' => null,
        'is_scoring_play' => null,
        'play_stats' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'play_id' => 'PlayID',
        'quarter_id' => 'QuarterID',
        'quarter_name' => 'QuarterName',
        'sequence' => 'Sequence',
        'time_remaining_minutes' => 'TimeRemainingMinutes',
        'time_remaining_seconds' => 'TimeRemainingSeconds',
        'play_time' => 'PlayTime',
        'updated' => 'Updated',
        'created' => 'Created',
        'team' => 'Team',
        'opponent' => 'Opponent',
        'down' => 'Down',
        'distance' => 'Distance',
        'yard_line' => 'YardLine',
        'yard_line_territory' => 'YardLineTerritory',
        'yards_to_end_zone' => 'YardsToEndZone',
        'type' => 'Type',
        'yards_gained' => 'YardsGained',
        'description' => 'Description',
        'is_scoring_play' => 'IsScoringPlay',
        'play_stats' => 'PlayStats'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'play_id' => 'setPlayId',
        'quarter_id' => 'setQuarterId',
        'quarter_name' => 'setQuarterName',
        'sequence' => 'setSequence',
        'time_remaining_minutes' => 'setTimeRemainingMinutes',
        'time_remaining_seconds' => 'setTimeRemainingSeconds',
        'play_time' => 'setPlayTime',
        'updated' => 'setUpdated',
        'created' => 'setCreated',
        'team' => 'setTeam',
        'opponent' => 'setOpponent',
        'down' => 'setDown',
        'distance' => 'setDistance',
        'yard_line' => 'setYardLine',
        'yard_line_territory' => 'setYardLineTerritory',
        'yards_to_end_zone' => 'setYardsToEndZone',
        'type' => 'setType',
        'yards_gained' => 'setYardsGained',
        'description' => 'setDescription',
        'is_scoring_play' => 'setIsScoringPlay',
        'play_stats' => 'setPlayStats'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'play_id' => 'getPlayId',
        'quarter_id' => 'getQuarterId',
        'quarter_name' => 'getQuarterName',
        'sequence' => 'getSequence',
        'time_remaining_minutes' => 'getTimeRemainingMinutes',
        'time_remaining_seconds' => 'getTimeRemainingSeconds',
        'play_time' => 'getPlayTime',
        'updated' => 'getUpdated',
        'created' => 'getCreated',
        'team' => 'getTeam',
        'opponent' => 'getOpponent',
        'down' => 'getDown',
        'distance' => 'getDistance',
        'yard_line' => 'getYardLine',
        'yard_line_territory' => 'getYardLineTerritory',
        'yards_to_end_zone' => 'getYardsToEndZone',
        'type' => 'getType',
        'yards_gained' => 'getYardsGained',
        'description' => 'getDescription',
        'is_scoring_play' => 'getIsScoringPlay',
        'play_stats' => 'getPlayStats'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['play_id'] = isset($data['play_id']) ? $data['play_id'] : null;
        $this->container['quarter_id'] = isset($data['quarter_id']) ? $data['quarter_id'] : null;
        $this->container['quarter_name'] = isset($data['quarter_name']) ? $data['quarter_name'] : null;
        $this->container['sequence'] = isset($data['sequence']) ? $data['sequence'] : null;
        $this->container['time_remaining_minutes'] = isset($data['time_remaining_minutes']) ? $data['time_remaining_minutes'] : null;
        $this->container['time_remaining_seconds'] = isset($data['time_remaining_seconds']) ? $data['time_remaining_seconds'] : null;
        $this->container['play_time'] = isset($data['play_time']) ? $data['play_time'] : null;
        $this->container['updated'] = isset($data['updated']) ? $data['updated'] : null;
        $this->container['created'] = isset($data['created']) ? $data['created'] : null;
        $this->container['team'] = isset($data['team']) ? $data['team'] : null;
        $this->container['opponent'] = isset($data['opponent']) ? $data['opponent'] : null;
        $this->container['down'] = isset($data['down']) ? $data['down'] : null;
        $this->container['distance'] = isset($data['distance']) ? $data['distance'] : null;
        $this->container['yard_line'] = isset($data['yard_line']) ? $data['yard_line'] : null;
        $this->container['yard_line_territory'] = isset($data['yard_line_territory']) ? $data['yard_line_territory'] : null;
        $this->container['yards_to_end_zone'] = isset($data['yards_to_end_zone']) ? $data['yards_to_end_zone'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['yards_gained'] = isset($data['yards_gained']) ? $data['yards_gained'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['is_scoring_play'] = isset($data['is_scoring_play']) ? $data['is_scoring_play'] : null;
        $this->container['play_stats'] = isset($data['play_stats']) ? $data['play_stats'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets play_id
     *
     * @return int
     */
    public function getPlayId()
    {
        return $this->container['play_id'];
    }

    /**
     * Sets play_id
     *
     * @param int $play_id play_id
     *
     * @return $this
     */
    public function setPlayId($play_id)
    {
        $this->container['play_id'] = $play_id;

        return $this;
    }

    /**
     * Gets quarter_id
     *
     * @return int
     */
    public function getQuarterId()
    {
        return $this->container['quarter_id'];
    }

    /**
     * Sets quarter_id
     *
     * @param int $quarter_id quarter_id
     *
     * @return $this
     */
    public function setQuarterId($quarter_id)
    {
        $this->container['quarter_id'] = $quarter_id;

        return $this;
    }

    /**
     * Gets quarter_name
     *
     * @return string
     */
    public function getQuarterName()
    {
        return $this->container['quarter_name'];
    }

    /**
     * Sets quarter_name
     *
     * @param string $quarter_name quarter_name
     *
     * @return $this
     */
    public function setQuarterName($quarter_name)
    {
        $this->container['quarter_name'] = $quarter_name;

        return $this;
    }

    /**
     * Gets sequence
     *
     * @return int
     */
    public function getSequence()
    {
        return $this->container['sequence'];
    }

    /**
     * Sets sequence
     *
     * @param int $sequence sequence
     *
     * @return $this
     */
    public function setSequence($sequence)
    {
        $this->container['sequence'] = $sequence;

        return $this;
    }

    /**
     * Gets time_remaining_minutes
     *
     * @return int
     */
    public function getTimeRemainingMinutes()
    {
        return $this->container['time_remaining_minutes'];
    }

    /**
     * Sets time_remaining_minutes
     *
     * @param int $time_remaining_minutes time_remaining_minutes
     *
     * @return $this
     */
    public function setTimeRemainingMinutes($time_remaining_minutes)
    {
        $this->container['time_remaining_minutes'] = $time_remaining_minutes;

        return $this;
    }

    /**
     * Gets time_remaining_seconds
     *
     * @return int
     */
    public function getTimeRemainingSeconds()
    {
        return $this->container['time_remaining_seconds'];
    }

    /**
     * Sets time_remaining_seconds
     *
     * @param int $time_remaining_seconds time_remaining_seconds
     *
     * @return $this
     */
    public function setTimeRemainingSeconds($time_remaining_seconds)
    {
        $this->container['time_remaining_seconds'] = $time_remaining_seconds;

        return $this;
    }

    /**
     * Gets play_time
     *
     * @return string
     */
    public function getPlayTime()
    {
        return $this->container['play_time'];
    }

    /**
     * Sets play_time
     *
     * @param string $play_time play_time
     *
     * @return $this
     */
    public function setPlayTime($play_time)
    {
        $this->container['play_time'] = $play_time;

        return $this;
    }

    /**
     * Gets updated
     *
     * @return string
     */
    public function getUpdated()
    {
        return $this->container['updated'];
    }

    /**
     * Sets updated
     *
     * @param string $updated updated
     *
     * @return $this
     */
    public function setUpdated($updated)
    {
        $this->container['updated'] = $updated;

        return $this;
    }

    /**
     * Gets created
     *
     * @return string
     */
    public function getCreated()
    {
        return $this->container['created'];
    }

    /**
     * Sets created
     *
     * @param string $created created
     *
     * @return $this
     */
    public function setCreated($created)
    {
        $this->container['created'] = $created;

        return $this;
    }

    /**
     * Gets team
     *
     * @return string
     */
    public function getTeam()
    {
        return $this->container['team'];
    }

    /**
     * Sets team
     *
     * @param string $team team
     *
     * @return $this
     */
    public function setTeam($team)
    {
        $this->container['team'] = $team;

        return $this;
    }

    /**
     * Gets opponent
     *
     * @return string
     */
    public function getOpponent()
    {
        return $this->container['opponent'];
    }

    /**
     * Sets opponent
     *
     * @param string $opponent opponent
     *
     * @return $this
     */
    public function setOpponent($opponent)
    {
        $this->container['opponent'] = $opponent;

        return $this;
    }

    /**
     * Gets down
     *
     * @return int
     */
    public function getDown()
    {
        return $this->container['down'];
    }

    /**
     * Sets down
     *
     * @param int $down down
     *
     * @return $this
     */
    public function setDown($down)
    {
        $this->container['down'] = $down;

        return $this;
    }

    /**
     * Gets distance
     *
     * @return int
     */
    public function getDistance()
    {
        return $this->container['distance'];
    }

    /**
     * Sets distance
     *
     * @param int $distance distance
     *
     * @return $this
     */
    public function setDistance($distance)
    {
        $this->container['distance'] = $distance;

        return $this;
    }

    /**
     * Gets yard_line
     *
     * @return int
     */
    public function getYardLine()
    {
        return $this->container['yard_line'];
    }

    /**
     * Sets yard_line
     *
     * @param int $yard_line yard_line
     *
     * @return $this
     */
    public function setYardLine($yard_line)
    {
        $this->container['yard_line'] = $yard_line;

        return $this;
    }

    /**
     * Gets yard_line_territory
     *
     * @return string
     */
    public function getYardLineTerritory()
    {
        return $this->container['yard_line_territory'];
    }

    /**
     * Sets yard_line_territory
     *
     * @param string $yard_line_territory yard_line_territory
     *
     * @return $this
     */
    public function setYardLineTerritory($yard_line_territory)
    {
        $this->container['yard_line_territory'] = $yard_line_territory;

        return $this;
    }

    /**
     * Gets yards_to_end_zone
     *
     * @return int
     */
    public function getYardsToEndZone()
    {
        return $this->container['yards_to_end_zone'];
    }

    /**
     * Sets yards_to_end_zone
     *
     * @param int $yards_to_end_zone yards_to_end_zone
     *
     * @return $this
     */
    public function setYardsToEndZone($yards_to_end_zone)
    {
        $this->container['yards_to_end_zone'] = $yards_to_end_zone;

        return $this;
    }

    /**
     * Gets type
     *
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     *
     * @param string $type type
     *
     * @return $this
     */
    public function setType($type)
    {
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets yards_gained
     *
     * @return int
     */
    public function getYardsGained()
    {
        return $this->container['yards_gained'];
    }

    /**
     * Sets yards_gained
     *
     * @param int $yards_gained yards_gained
     *
     * @return $this
     */
    public function setYardsGained($yards_gained)
    {
        $this->container['yards_gained'] = $yards_gained;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets is_scoring_play
     *
     * @return bool
     */
    public function getIsScoringPlay()
    {
        return $this->container['is_scoring_play'];
    }

    /**
     * Sets is_scoring_play
     *
     * @param bool $is_scoring_play is_scoring_play
     *
     * @return $this
     */
    public function setIsScoringPlay($is_scoring_play)
    {
        $this->container['is_scoring_play'] = $is_scoring_play;

        return $this;
    }

    /**
     * Gets play_stats
     *
     * @return \Acme\FantasyDataPlayByPlay\\PlayStat[]
     */
    public function getPlayStats()
    {
        return $this->container['play_stats'];
    }

    /**
     * Sets play_stats
     *
     * @param \Acme\FantasyDataPlayByPlay\\PlayStat[] $play_stats play_stats
     *
     * @return $this
     */
    public function setPlayStats($play_stats)
    {
        $this->container['play_stats'] = $play_stats;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param  integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param  integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param  integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}

